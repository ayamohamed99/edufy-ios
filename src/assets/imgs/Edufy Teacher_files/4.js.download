webpackJsonp([4],{

/***/ 512:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportTemplatePageModule", function() { return ReportTemplatePageModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__report_template__ = __webpack_require__(715);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_components_module__ = __webpack_require__(296);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ReportTemplatePageModule = /** @class */ (function () {
    function ReportTemplatePageModule() {
    }
    ReportTemplatePageModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [
                __WEBPACK_IMPORTED_MODULE_2__report_template__["a" /* ReportTemplatePage */],
            ],
            imports: [
                __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["f" /* IonicPageModule */].forChild(__WEBPACK_IMPORTED_MODULE_2__report_template__["a" /* ReportTemplatePage */]),
                __WEBPACK_IMPORTED_MODULE_3__components_components_module__["a" /* ComponentsModule */],
            ],
        })
    ], ReportTemplatePageModule);
    return ReportTemplatePageModule;
}());

//# sourceMappingURL=report-template.module.js.map

/***/ }),

/***/ 715:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReportTemplatePage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_account__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_template_Shape__ = __webpack_require__(716);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ionic_storage__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__services_dailyreport__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__services_checkboxFunctionService__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ionic_native_date_picker__ = __webpack_require__(305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__services_transFormDate__ = __webpack_require__(306);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










/**
 * Generated class for the ReportTemplatePage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
var ReportTemplatePage = /** @class */ (function () {
    /////////////////// HERE THE CODE START /////////////////////////////////// ABOVE CODE FOR VIEW ONLY TO APPEAR //////////////////
    function ReportTemplatePage(navCtrl, navParams, accountServ, sanitizer, platform, storage, dailyReportServ, loadCtrl, toastCtrl, viewCtrl, alrtCtrl, checkboxFunctionService, datePicker, tranformDate) {
        var _this = this;
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.accountServ = accountServ;
        this.sanitizer = sanitizer;
        this.platform = platform;
        this.storage = storage;
        this.dailyReportServ = dailyReportServ;
        this.loadCtrl = loadCtrl;
        this.toastCtrl = toastCtrl;
        this.viewCtrl = viewCtrl;
        this.alrtCtrl = alrtCtrl;
        this.checkboxFunctionService = checkboxFunctionService;
        this.datePicker = datePicker;
        this.tranformDate = tranformDate;
        this.console = console;
        this.localStorageToken = 'LOCAL_STORAGE_TOKEN';
        this.drQuestion = [];
        this.enableOtherNote = [];
        this.helperTextSSTOVS = false;
        this.switchToHelperSSTOVS = 0;
        this.templateViewObjects = [];
        this.singleQuestionRow = [];
        this.countParameters = 0;
        this.selectionData = new Map();
        this.overrideAnswer = true;
        this.conflict = [];
        this.selectedListOfStudents = [];
        this.selectedListOfStudentsID = [];
        this.imgsFoodName = ['All', 'Few', 'Half', 'Little', 'More', 'Most', 'None', 'Quarter', 'Some'];
        this.imgsMilkName = ['All', 'None', 'Some'];
        this.imgsMoodName = ['Active', 'Aggressive', 'Cheerful', 'Cranky', 'Different', 'Difficult', 'Energetic',
            'Excellent', 'Fazzy', 'Good', 'Happy', 'Irretated', 'Lazy', 'Missed My Mummy', 'Naughty',
            'Normal', 'On_off', 'Quiet', 'Sad', 'Sick', 'Sleepy', 'Tired', 'Unhappy', 'Very Good'];
        this.reportSaveORupdates = false;
        this.checkIfChangesAnswer = false;
        this.KEEP_ORIGINAL_PATERN = "^_KEEP_ORIGINAL_^";
        if (this.accountServ.reportId == -1) {
            this.reportId = null;
        }
        else {
            this.reportId = this.accountServ.reportId;
        }
        //this is your html write the directive here
        this.reportTemplate = "";
        this.drQuestion = [];
        this.drQuestion = this.navParams.get('template');
        this.recoveryQuestion = this.navParams.get('template');
        this.selectedClassId = this.navParams.get('class').classId;
        this.selectedClass = this.navParams.get('class');
        ////PageName
        this.selectedListOfStudents = this.navParams.get('selected');
        if (this.selectedListOfStudents.length > 1) {
            if (this.accountServ.reportId == -1) {
                this.PageName = this.selectedListOfStudents.length + " daily reports are selected";
            }
            else {
                this.PageName = this.selectedListOfStudents.length + this.accountServ.reportPage + " are selected";
            }
        }
        else {
            if (this.accountServ.reportId == -1) {
                this.PageName = this.selectedListOfStudents[0].studentName + "'s daily report";
            }
            else {
                this.PageName = this.selectedListOfStudents[0].studentName + "'s " + this.accountServ.reportPage;
            }
        }
        for (var i in this.selectedListOfStudents) {
            this.selectedListOfStudentsID.push({ id: this.selectedListOfStudents[i].studentId });
        }
        /////Date of Page
        this.reportDate = this.navParams.get('reportDate');
        this.selectedClassIndex = this.navParams.get('classIndex');
        this.selectedReportDate = this.navParams.get('selectedDate');
        this.reportDefultAnswer = this.navParams.get('reportAnswer');
        this.reportAnswer = this.reportDefultAnswer;
        console.log(this.reportAnswer);
        this.reportAnswersNoOfItems = this.navParams.get('reportAnswersNoOfItems');
        this.reportQuestionsRecovery = this.navParams.get('reportQuestionsRecovery');
        this.reportQuestionsEditParamTemps = this.navParams.get('reportQuestionsEditParamTemps');
        this.editQuestionAllowed = this.navParams.get('editQuestionAllowed');
        if (this.selectedListOfStudents.length > 1) {
            this.conflict = this.navParams.get('reportConflict');
        }
        var editDropOrNot = true;
        var editSingleOrNot = true;
        for (var i = 0; i < this.drQuestion.length; i++) {
            var questionTitle = void 0;
            if (this.accountServ.reportId == -1) {
                questionTitle = this.drQuestion[i].dailyReportQuestionType.title;
            }
            else {
                questionTitle = this.drQuestion[i].reportQuestionType.title;
            }
            if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN' || questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR') {
                for (var _i = 0, _a = this.drQuestion[i].parametersList; _i < _a.length; _i++) {
                    var itm = _a[_i];
                    if (itm.key == "OPTION_ANSWER") {
                        editDropOrNot = false;
                    }
                }
            }
            else if (questionTitle == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
                for (var _b = 0, _c = this.drQuestion[i].parametersList; _b < _c.length; _b++) {
                    var itm = _c[_b];
                    if (itm.key == "OPTION_ANSWER") {
                        editSingleOrNot = false;
                    }
                }
            }
        }
        var template = new __WEBPACK_IMPORTED_MODULE_4__models_template_Shape__["a" /* TemplateShape */]();
        for (var i = 0; i < this.drQuestion.length; i++) {
            var questionTitle = void 0;
            if (this.accountServ.reportId == -1) {
                questionTitle = this.drQuestion[i].dailyReportQuestionType.title;
            }
            else {
                questionTitle = this.drQuestion[i].reportQuestionType.title;
            }
            var temp = template.makeTheTemplateShape(this.drQuestion[i], this.accountServ.reportId);
            if (temp.length > 0) {
                if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN' || questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR') {
                    if (editDropOrNot == false) {
                        this.drQuestion[i].parametersList = temp;
                    }
                }
                else if (questionTitle == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
                    if (editSingleOrNot == false) {
                        this.drQuestion[i].parametersList = temp;
                    }
                }
                else {
                    this.drQuestion[i].parametersList = temp;
                }
            }
        }
        if (platform.is('core')) {
            this.dailyReportServ.putHeader(localStorage.getItem(this.localStorageToken));
            for (var i = 0; i < this.drQuestion.length; i++) {
                var questionTitle = void 0;
                if (this.accountServ.reportId == -1) {
                    questionTitle = this.drQuestion[i].dailyReportQuestionType.title;
                }
                else {
                    questionTitle = this.drQuestion[i].reportQuestionType.title;
                }
                if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN' || questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR') {
                    this.callDataAndWait();
                    break;
                }
            }
        }
        else {
            storage.get(this.localStorageToken).then(function (val) {
                _this.dailyReportServ.putHeader(val);
                for (var i = 0; i < _this.drQuestion.length; i++) {
                    var questionTitle = void 0;
                    if (_this.accountServ.reportId == -1) {
                        questionTitle = _this.drQuestion[i].dailyReportQuestionType.title;
                    }
                    else {
                        questionTitle = _this.drQuestion[i].reportQuestionType.title;
                    }
                    if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN' || questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR') {
                        _this.callDataAndWait();
                        break;
                    }
                }
            });
        }
        this.checkIfChangesAnswer = false;
    }
    ///////////////////// HERE ORGANIZE THE VIEW//////////////////////
    ReportTemplatePage.prototype.showNames = function () {
        var selectedListOfStudents = [];
        selectedListOfStudents = this.navParams.get('selected');
        var studentsNames = "";
        for (var i = 0; i < selectedListOfStudents.length; i++) {
            if (i == (selectedListOfStudents.length - 1)) {
                studentsNames += selectedListOfStudents[i].studentName;
            }
            else {
                studentsNames += selectedListOfStudents[i].studentName + " & ";
            }
        }
        if (selectedListOfStudents.length > 1) {
            this.alrtCtrl.create({
                title: 'Selected students of this report',
                subTitle: studentsNames,
                buttons: ['OK']
            }).present();
        }
    };
    ReportTemplatePage.prototype.openDataMULTI_SHORT_TEXT_ONE_VIEW_SELECTED = function (i) {
        this.MULTI_SHORT_TEXT_ONE_VIEW_SELECTED_Index = i;
    };
    ReportTemplatePage.prototype.openDataDROPDOWN_MENU_ONE_VIEW_SELECTED = function (i) {
        this.DROPDOWN_MENU_ONE_VIEW_SELECTED_index = i;
    };
    ReportTemplatePage.prototype.openDataSINGLE_SHORT_TEXT_ONE_VIEW_SELECTED = function (i) {
        this.SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED_INDEX = i;
    };
    ReportTemplatePage.prototype.removeCount = function () {
        this.countParameters = 0;
    };
    ReportTemplatePage.prototype.setImageOrLable = function (question, pramName) {
        var pramNameFound = false;
        var qName = question.toLowerCase();
        if (qName.includes('food') || qName.includes('snack') || qName.includes('breakfast') || qName.includes('lunch') || qName.includes('late snack') || qName.includes('meal') || qName.includes('extra meal')) {
            for (var _i = 0, _a = this.imgsFoodName; _i < _a.length; _i++) {
                var name_1 = _a[_i];
                if (name_1 == pramName) {
                    pramNameFound = true;
                }
            }
            if (pramNameFound) {
                return 'Food';
            }
            else {
                return 'Label';
            }
        }
        else if (qName.includes('mood') || qName.includes('behaviour') || qName.includes('my day was')) {
            for (var _b = 0, _c = this.imgsMoodName; _b < _c.length; _b++) {
                var name_2 = _c[_b];
                if (name_2 == pramName) {
                    pramNameFound = true;
                }
            }
            if (pramNameFound) {
                return 'Mood';
            }
            else {
                return 'Label';
            }
        }
        else if (qName.includes('milk') || qName.includes('milk / juice') || qName.includes('juice') || qName.includes('drinks') || qName.includes('drink')) {
            for (var _d = 0, _e = this.imgsMilkName; _d < _e.length; _d++) {
                var name_3 = _e[_d];
                if (name_3 == pramName) {
                    pramNameFound = true;
                }
            }
            if (pramNameFound) {
                return 'Milk';
            }
            else {
                return 'Label';
            }
        }
        else {
            return 'Label';
        }
    };
    ReportTemplatePage.prototype.showSaveOrUpdate = function () {
        if (this.navParams.get('theClassIsSelected')) {
            var noOfStudentFinalized = void 0;
            if (this.accountServ.reportId == -1) {
                noOfStudentFinalized = this.selectedClass.noOfStudentDailyReportFinalized;
            }
            else {
                noOfStudentFinalized = this.selectedClass.noOfStudentReportFinalized;
            }
            if (noOfStudentFinalized == 0) {
                return 'save';
            }
            else {
                return 'update';
            }
        }
        else {
            var foundStudentThatFinalized = false;
            for (var _i = 0, _a = this.navParams.get('selected'); _i < _a.length; _i++) {
                var student = _a[_i];
                if (student.reportFinalized) {
                    foundStudentThatFinalized = true;
                }
            }
            if (foundStudentThatFinalized) {
                return 'update';
            }
            else {
                return 'save';
            }
        }
    };
    ReportTemplatePage.prototype.showButtonOfSaveOrUpdate = function () {
        if (this.accountServ.reportId == -1) {
            if (this.showSaveOrUpdate() == 'save' && this.accountServ.getUserRole().dailyReportCreate) {
                return true;
            }
            else if (this.showSaveOrUpdate() == 'update' && this.accountServ.getUserRole().dailyReportUpdate) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (this.showSaveOrUpdate() == 'save' && this.accountServ.getUserRole().reportCreate) {
                return true;
            }
            else if (this.showSaveOrUpdate() == 'update' && this.accountServ.getUserRole().reportUpdate) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    ReportTemplatePage.prototype.showRestButton = function () {
        var foundFinalizedStudent;
        for (var i in this.selectedListOfStudents) {
            if (this.selectedListOfStudents[i].reportFinalized) {
                foundFinalizedStudent = true;
            }
        }
        if (this.accountServ.reportId == -1) {
            if (this.accountServ.getUserRole().dailyReportReset && foundFinalizedStudent) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (this.accountServ.getUserRole().reportReset && foundFinalizedStudent) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    ReportTemplatePage.prototype.showApproveButton = function () {
        var roleApprove = false;
        var studentNotFinalized = false;
        if (this.accountServ.reportId == -1) {
            roleApprove = this.accountServ.getUserRole().dailyReportApprove;
        }
        else {
            roleApprove = this.accountServ.getUserRole().reportApprove;
        }
        if (roleApprove) {
            for (var _i = 0, _a = this.selectedListOfStudents; _i < _a.length; _i++) {
                var student = _a[_i];
                if (!student.reportFinalized) {
                    studentNotFinalized = true;
                }
            }
            if (studentNotFinalized) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    };
    ReportTemplatePage.prototype.showEditButton = function () {
        if (this.accountServ.reportId == -1) {
            return this.accountServ.getUserRole().dailyReportEditQuestionCreate;
        }
        else {
            return this.accountServ.getUserRole().reportEditQuestionCreate;
        }
    };
    ReportTemplatePage.prototype.showConflict = function (drIndex) {
        if (this.conflict) {
            if (this.conflict.length != 0) {
                if (!this.conflict[drIndex]) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    ReportTemplatePage.prototype.dataChanges = function () {
        this.checkIfChangesAnswer = true;
    };
    ReportTemplatePage.prototype.close = function () {
        var _this = this;
        if (!this.reportSaveORupdates && this.checkIfChangesAnswer) {
            this.alrtCtrl.create({
                title: 'Warning!',
                subTitle: 'Are you want to save the changes ?',
                buttons: [
                    {
                        text: 'No',
                        role: 'cancel',
                        handler: function () {
                            _this.viewCtrl.dismiss({ name: 'dismissed' });
                        }
                    },
                    {
                        text: 'Yes',
                        handler: function () {
                            if (_this.showSaveOrUpdate() == 'save' && _this.showButtonOfSaveOrUpdate()) {
                                _this.saveDailyReport();
                            }
                            else if (_this.showSaveOrUpdate() == 'update' && _this.showButtonOfSaveOrUpdate()) {
                                _this.updateDailyReport();
                            }
                        }
                    }
                ]
            }).present();
        }
        else {
            this.viewCtrl.dismiss({ name: 'dismissed' });
        }
    };
    ReportTemplatePage.prototype.ionViewWillLeave = function () {
        this.drQuestion = this.recoveryQuestion;
    };
    ReportTemplatePage.prototype.callDataAndWait = function () {
        var _this = this;
        this.load = this.loadCtrl.create({
            content: '',
            cssClass: "loadingWithoutBackground"
        });
        this.load.present();
        var promises = [];
        for (var i = 0; i < this.drQuestion.length; i++) {
            var questionTitle = void 0;
            if (this.accountServ.reportId == -1) {
                questionTitle = this.drQuestion[i].dailyReportQuestionType.title;
            }
            else {
                questionTitle = this.drQuestion[i].reportQuestionType.title;
            }
            if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN' || questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR') {
                for (var _i = 0, _a = this.drQuestion[i].parametersList; _i < _a.length; _i++) {
                    var itm = _a[_i];
                    if (itm.key == "OPTION_DROP_DOWN") {
                        promises.push(this.getDropDownListIfFound(this.drQuestion[i].id));
                    }
                }
            }
        }
        Promise.all(promises).then(function (val) {
            _this.load.dismiss();
        }).catch(function (err) {
            console.log(err);
            _this.load.dismiss();
        });
    };
    ReportTemplatePage.prototype.getDropDownListIfFound = function (questionKey) {
        var _this = this;
        return this.dailyReportServ.getDropDownPremeter(questionKey, this.reportId).toPromise().then(function (val) {
            _this.selectionData.set(questionKey, val);
        }).catch(function (eer) {
            console.log(eer);
            _this.load.dismiss();
        });
    };
    ReportTemplatePage.prototype.removeQuestionParameter = function (questionNumber, parameterId) {
        // console.log('remove ... questionNumber=
        // '+questionNumber+', parameterId=
        // '+parameterId);
        var newQuestionParameters = [];
        var oldQuestionParameters = this.drQuestion[questionNumber].parametersList;
        // console.log('Old:');
        // console.log(oldQuestionParameters);
        var ctr = 0;
        for (var i = 0; i < oldQuestionParameters.length; i++) {
            if (oldQuestionParameters[i].id !== parameterId) {
                newQuestionParameters[ctr] = oldQuestionParameters[i];
                ctr++;
            }
        }
        console.log('New:');
        console.log(this.drQuestion);
        this.drQuestion[questionNumber].parametersList = newQuestionParameters;
    };
    ReportTemplatePage.prototype.addParameterForQuestion = function (questionNumber) {
        // console.log($scope.reportQuestionsEditParamTemps);
        var numberOfParams = this.drQuestion[questionNumber].parametersList.length;
        var id = 0;
        var parametersList = this.drQuestion[questionNumber].parametersList;
        // give temporary Id to the new parameter
        if (parametersList.length > 0) {
            id = parametersList[0].id;
            var isInList = true;
            while (isInList) {
                id = id + 1;
                var found = false;
                for (var i = 0; i < parametersList.length; i++) {
                    if (id === parametersList[i].id) {
                        found = true;
                    }
                }
                if (found === false) {
                    isInList = false;
                }
            }
        }
        var questionTitle;
        if (this.accountServ.reportId == -1) {
            questionTitle = this.drQuestion[questionNumber].dailyReportQuestionType.title;
        }
        else {
            questionTitle = this.drQuestion[questionNumber].reportQuestionType.title;
        }
        switch (questionTitle) {
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
                var value = this.reportQuestionsEditParamTemps[questionNumber].parameters[0].value;
                if (value === '' || value.replace(" ", "") === '' || value === "" || value.replace(" ", "") === "") {
                    return;
                }
                this.drQuestion[questionNumber].parametersList[numberOfParams] = {};
                this.drQuestion[questionNumber].parametersList[numberOfParams].id = id;
                this.drQuestion[questionNumber].parametersList[numberOfParams].value = this.reportQuestionsEditParamTemps[questionNumber].parameters[0].value;
                this.drQuestion[questionNumber].parametersList[numberOfParams].key = this.reportQuestionsEditParamTemps[questionNumber].parameters[0].key;
                // clear variables
                this.reportQuestionsEditParamTemps[questionNumber].parameters[0].value = '';
                console.log('LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER  parameter added!');
                console.log(this.drQuestion[questionNumber].parametersList);
                break;
        }
    };
    ReportTemplatePage.prototype.enableOther = function (questionN, i) {
        this.checkIfChangesAnswer = true;
        var question = this.drQuestion[questionN];
        var key = question.parametersList[i].key;
        if (key == "OPTION_ANSWER_WITH_EDIT") {
            this.enableOtherNote[questionN] = false;
        }
        else {
            this.enableOtherNote[questionN] = true;
            this.reportAnswer.dailyReportAnswersObjectsList[questionN].answer[1] = "";
        }
    };
    ReportTemplatePage.prototype.override = function () {
        this.overrideAnswer = true;
    };
    ReportTemplatePage.prototype.editSaveQuestion = function (questionNumber) {
        if (this.drQuestion[questionNumber].editQuestion) {
            // save the edited question
            // check if there is any question still
            // editing if so $scope.isUserEditing must
            // still true
            this.drQuestion[questionNumber].editQuestion = false;
            this.drQuestion[questionNumber].isEdited = true;
            var tmp = false;
            for (var i = 0; i < this.drQuestion.length; i++) {
                if (this.drQuestion[i].editQuestion) {
                    tmp = true;
                    break;
                }
            }
            this.isUserEditing = tmp;
            if (!this.isUserEditing) {
                this.saveTemplateAfterEdit();
            }
            // console.log('saved! ');
        }
        else {
            // take a copy of current editing question
            // for recovery if cancel
            this.reportQuestionsRecovery[questionNumber] = this.getNewInstanceOf(this.drQuestion[questionNumber]);
            // start edit question -questionNumber-
            this.isUserEditing = true;
            this.drQuestion[questionNumber].editQuestion = true;
            for (var i_1 = 0; i_1 < this.drQuestion.length; i_1++) {
                this.reportQuestionsEditParamTemps[i_1].parameters = [];
                for (var j = 0; j < this.drQuestion[i_1].parametersList.length; j++) {
                    var param = {
                        "id": '',
                        "key": '',
                        "value": ''
                    };
                    this.reportQuestionsEditParamTemps[i_1].parameters[j] = param;
                    this.reportQuestionsEditParamTemps[i_1].parameters[j].key = this.drQuestion[i_1].parametersList[j].key;
                }
            }
            console.log('start Edit! ');
            console.log(this.drQuestion);
            // console.log($scope.reportQuestionsEditParamTemps);
            // console.log(reportQuestionsRecovery);
        }
    };
    ReportTemplatePage.prototype.saveTemplateAfterEdit = function () {
        var _this = this;
        this.load = this.loadCtrl.create({
            content: ""
        });
        this.load.present();
        var _loop_1 = function (i) {
            if (this_1.drQuestion[i].isEdited) {
                /*
                 * console.log('Saving Question ' + i + ' ...');
                 */
                var questionId = this_1.drQuestion[i].id;
                var questionParameters = this_1.drQuestion[i].parametersList;
                var questionNumber_1 = this_1.drQuestion[i].questionNumber;
                this_1.dailyReportServ.saveDailyReportTemplateQuestionParameters(questionId, questionParameters, i, this_1.reportId).subscribe(function (response) {
                    _this.load.dismiss();
                    _this.presentToast("Question edited successfully.");
                    var data;
                    data = response;
                    console.log('Saving done!');
                    _this.drQuestion[data.questionNumber].isEdited = false;
                    console.log('Template Saved!!');
                }, function (reason) {
                    _this.load.dismiss();
                    if (reason.status == 200) {
                        _this.presentToast("Question edited successfully.");
                        var data = void 0;
                        data = reason;
                        console.log('Saving done!');
                        _this.drQuestion[data.questionNumber].isEdited = false;
                        console.log('Template Saved!!');
                    }
                    else {
                        _this.cancelEditigQuestion(questionNumber_1);
                        _this.presentToast("Failed question editing.");
                        console.log(reason);
                    }
                });
            }
        };
        var this_1 = this;
        for (var i = 0; i < this.drQuestion.length; i++) {
            _loop_1(i);
        }
    };
    ReportTemplatePage.prototype.fabSelected = function (button, fab) {
        fab.close();
        var noFinalize = 0;
        if (this.accountServ.reportId == -1) {
            noFinalize = this.selectedClass.noOfStudentDailyReportFinalized;
        }
        else {
            noFinalize = this.selectedClass.noOfStudentReportFinalized;
        }
        if (button == 'approve') {
            this.approveDailyReport(this.selectedClassId, this.selectedClass.className, this.selectedClass.grade.gradeName, this.selectedClass.noOfAllStudent, noFinalize);
        }
        else if (button == 'save') {
            this.saveDailyReport();
        }
        else if (button == 'update') {
            this.updateDailyReport();
        }
        else if (button == 'rest') {
            this.rollbackReport(this.navParams.get('selected')[0].studentId, this.navParams.get('selected')[0].studentName, null, null);
        }
    };
    ReportTemplatePage.prototype.cancelEditigQuestion = function (qNumber) {
        this.drQuestion[qNumber] = this.getNewInstanceOf(this.reportQuestionsRecovery[qNumber]);
        var tmp = false;
        for (var i = 0; i < this.drQuestion.length; i++) {
            if ((typeof this.drQuestion[i].editQuestion !== "undefined") && this.drQuestion[i].editQuestion) {
                tmp = true;
                break;
            }
        }
        this.isUserEditing = tmp;
        console.log('Canceled!');
    };
    ReportTemplatePage.prototype.getNewInstanceOf = function (obj) {
        var copy;
        // Handle the 3 simple types, and null or
        // undefined
        if (null == obj || "object" != typeof obj)
            return obj;
        // Handle Date
        if (obj instanceof Date) {
            copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        // Handle Array
        if (obj instanceof Array) {
            copy = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                copy[i] = this.getNewInstanceOf(obj[i]);
            }
            return copy;
        }
        // Handle Object
        if (obj instanceof Object) {
            copy = {};
            for (var attr in obj) {
                if (obj.hasOwnProperty(attr))
                    copy[attr] = this.getNewInstanceOf(obj[attr]);
            }
            return copy;
        }
        throw new Error("Unable to copy obj! Its type isn't supported.");
    };
    ReportTemplatePage.prototype.mappingDefaultAnswers = function (defaultDailyReportAnswer, question) {
        return defaultDailyReportAnswer.answer = this.getDefaultValue(question);
    };
    ;
    ReportTemplatePage.prototype.getDefaultValue = function (drQuestion) {
        var questionTitle;
        if (this.accountServ.reportId == -1) {
            questionTitle = drQuestion.dailyReportQuestionType.title;
        }
        else {
            questionTitle = drQuestion.reportQuestionType.title;
        }
        if (questionTitle == 'TEXT_QUESTION') {
            return "";
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN' ||
            questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR') {
            var val = [];
            var firstTime = true;
            var firstTextField = true;
            var counter = 0;
            var defailtValueArray = [];
            for (var v = 0; v < drQuestion.parametersList.length; v++) {
                if (drQuestion.parametersList[v].key == "OPTION_HELPER_TITLE") {
                }
                else if (drQuestion.parametersList[v].key == "OPTION_HELPER_TEXT") {
                    defailtValueArray[counter] = {};
                    defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                    defailtValueArray[counter].value = "";
                    counter++;
                }
                else if (drQuestion.parametersList[v].key == "OPTION_ANSWER") {
                    defailtValueArray[counter] = {};
                    defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                    defailtValueArray[counter].value = drQuestion.parametersList[v].value;
                    counter++;
                }
                else {
                }
            }
            for (var d_1 = 0; d_1 < defailtValueArray.length; d_1++) {
                if (defailtValueArray[d_1].key == "OPTION_HELPER_TEXT") {
                    val[d_1] = defailtValueArray[d_1].value;
                }
                else if (defailtValueArray[d_1].key == "OPTION_ANSWER") {
                    val[d_1] = defailtValueArray[d_1].value;
                }
            }
            return val;
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER' ||
            questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER' ||
            questionTitle == 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER' ||
            questionTitle == 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER') {
            return {};
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT') {
            return {};
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT') {
            return [drQuestion.parametersList[0].value];
        }
        else if (questionTitle == 'MULTI_SHORT_TEXT_MULTISELECT_VIEW_SELECTED') {
            return {};
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION') {
            return [drQuestion.parametersList[0].value];
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION') {
            return [false];
        }
        else if (questionTitle == 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER' ||
            questionTitle == 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER') {
            return drQuestion.parametersList[0].value;
        }
        else if (questionTitle == 'CONSTANT_SHORT_HELPER_TEXT_QUESTION' ||
            questionTitle == 'CONSTANT_LONG_HELPER_TEXT_QUESTION' ||
            questionTitle == 'SHORT_HELPER_TEXT_QUESTION' ||
            questionTitle == 'LONG_HELPER_TEXT_QUESTION') {
            return {};
        }
        else if (questionTitle == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
            var val = {};
            var firstTime = true;
            var counter = 0;
            var defailtValueArray = [];
            for (var v = 0; v < drQuestion.parametersList.length; v++) {
                if (drQuestion.parametersList[v].key == "OPTION_HELPER_TITLE") {
                }
                else if (drQuestion.parametersList[v].key == "OPTION_HELPER_TEXT") {
                    defailtValueArray[counter] = {};
                    defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                    defailtValueArray[counter].value = "";
                    counter++;
                    firstTime = true;
                }
                else if (drQuestion.parametersList[v].key != "OPTION_HELPER_TITLE" || drQuestion.parametersList[v].key != "OPTION_HELPER_TEXT") {
                    for (var _i = 0, _a = drQuestion.parametersList[v]; _i < _a.length; _i++) {
                        var pram = _a[_i];
                        if (firstTime) {
                            defailtValueArray[counter] = {};
                            defailtValueArray[counter].key = pram.key;
                            defailtValueArray[counter].value = pram.value;
                            counter++;
                            firstTime = false;
                        }
                        else {
                        }
                    }
                }
            }
            var textTemp = 0;
            for (var d_2 = 0; d_2 < defailtValueArray.length; d_2++) {
                if (defailtValueArray[d_2].key == "OPTION_HELPER_TEXT") {
                    textTemp = d_2 + 1;
                    val[d_2] = defailtValueArray[d_2].value;
                }
                else if (defailtValueArray[d_2].key == "OPTION_ANSWER") {
                    val[textTemp] = defailtValueArray[d_2].value;
                }
            }
            return val;
        }
        else if (questionTitle == 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED') {
            var val = [];
            var firstTime = true;
            var firstTextField = true;
            var counter = 0;
            var defailtValueArray = [];
            for (var v = 0; v < drQuestion.parametersList.length; v++) {
                if (drQuestion.parametersList[v].key == "OPTION_HELPER_TITLE") {
                }
                else if (drQuestion.parametersList[v].key == "OPTION_HELPER_TEXT") {
                    if (firstTextField) {
                        defailtValueArray[counter] = {};
                        defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                        defailtValueArray[counter].value = "";
                        counter++;
                        firstTextField = false;
                    }
                    else {
                        defailtValueArray[counter] = {};
                        defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                        defailtValueArray[counter].value = "00";
                        counter++;
                        firstTextField = true;
                    }
                    firstTime = true;
                }
                else if (drQuestion.parametersList[v].key == "OPTION_ANSWER") {
                    if (firstTime) {
                        defailtValueArray[counter] = {};
                        defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                        defailtValueArray[counter].value = drQuestion.parametersList[v].value;
                        counter++;
                        firstTime = false;
                    }
                    else {
                    }
                }
            }
            for (var d_3 = 0; d_3 < defailtValueArray.length; d_3++) {
                if (defailtValueArray[d_3].key == "OPTION_HELPER_TEXT") {
                    val[d_3] = defailtValueArray[d_3].value;
                }
                else if (defailtValueArray[d_3].key == "OPTION_ANSWER") {
                    val[d_3] = defailtValueArray[d_3].value;
                }
            }
            return val;
        }
        else if (questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR' ||
            questionTitle == 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN') {
            var val = {};
            var firstTime = true;
            var counter = 0;
            var defailtValueArray = [];
            for (var v = 0; v < drQuestion.parametersList.length; v++) {
                if (drQuestion.parametersList[v].key == "OPTION_HELPER_TITLE") {
                }
                else if (drQuestion.parametersList[v].key == "OPTION_DROP_DOWN") {
                    defailtValueArray[counter] = {};
                    defailtValueArray[counter].key = drQuestion.parametersList[v].key;
                    defailtValueArray[counter].value = "";
                    counter++;
                    firstTime = true;
                }
                else if (drQuestion.parametersList[v].key != "OPTION_HELPER_TITLE" && drQuestion.parametersList[v].key != "OPTION_DROP_DOWN") {
                    for (var _b = 0, _c = drQuestion.parametersList[v]; _b < _c.length; _b++) {
                        var pram = _c[_b];
                        if (pram.key == "OPTION_ANSWER") {
                            if (firstTime) {
                                defailtValueArray[counter] = {};
                                defailtValueArray[counter].key = pram.key;
                                defailtValueArray[counter].value = pram.value;
                                counter++;
                                firstTime = false;
                            }
                            else {
                            }
                        }
                    }
                }
            }
            var tempDrop = 0;
            for (var d = 0; d < defailtValueArray.length; d++) {
                if (defailtValueArray[d].key == "OPTION_DROP_DOWN") {
                    tempDrop = d;
                    val[d] = "";
                }
                else if (defailtValueArray[d].key == "OPTION_ANSWER") {
                    val[(tempDrop + 1)] = defailtValueArray[d].value;
                }
            }
            return val;
        }
        else {
            return "";
        }
    };
    ReportTemplatePage.prototype.approveDailyReport = function (classId, className, classGradeName, noOfAllStudents, noOfFinalized) {
        var _this = this;
        var noOfUnFinalized = noOfAllStudents - noOfFinalized;
        this.alrtCtrl.create({
            title: 'Approve Report',
            subTitle: 'Do you want to approve the reports for the selected student(s) ?',
            buttons: [
                {
                    text: 'No',
                    role: 'cancel',
                    handler: function () {
                        console.log('Cancel clicked');
                    }
                },
                {
                    text: 'Yes',
                    handler: function () {
                        _this.load = _this.loadCtrl.create({
                            content: "the report is approving now ..."
                        });
                        _this.load.present();
                        var studentsIdsArray = [];
                        for (var _i = 0, _a = _this.navParams.get('selected'); _i < _a.length; _i++) {
                            var student = _a[_i];
                            studentsIdsArray.push(student.studentId);
                        }
                        _this.dailyReportServ.approveReportByStudent(_this.selectedReportDate, studentsIdsArray, _this.reportId).subscribe(function (response) {
                            _this.load.dismiss();
                            _this.presentToast("Report approved successfully.");
                        }, function (err) {
                            _this.console.log(err);
                            _this.load.dismiss();
                            _this.alrtCtrl.create({
                                title: 'Approve Report',
                                subTitle: 'The Report didn\'t approved',
                                buttons: ['Ok']
                            }).present();
                        });
                    }
                }
            ]
        }).present();
    };
    ReportTemplatePage.prototype.rollbackReport = function (studentId, studentName, selectedDate, classId) {
        var _this = this;
        this.alrtCtrl.create({
            title: 'Reset Student Report',
            subTitle: 'Are you sure you want to reset ' + studentName + ' \'s report?',
            buttons: [
                {
                    text: 'Cancel',
                    role: 'cancel',
                    handler: function () {
                        console.log('Cancel clicked');
                    }
                },
                {
                    text: 'Yes',
                    handler: function () {
                        _this.load = _this.loadCtrl.create({
                            content: "the report is now reset..."
                        });
                        _this.load.present();
                        if (_this.navParams.get('selected').length == 1) {
                            _this.dailyReportServ.deleteStudnetReport(_this.navParams.get('selected')[0].studentId, _this.selectedReportDate, _this.reportId).subscribe(function (response) {
                                _this.load.dismiss();
                                _this.viewCtrl.dismiss({ closeView: "Report reset successfully." });
                            }, function (err) {
                                _this.console.log(err);
                                _this.load.dismiss();
                                _this.alrtCtrl.create({
                                    title: 'Reset Student Report',
                                    subTitle: 'The Report didn\'t Reset',
                                    buttons: ['Ok']
                                });
                            });
                        }
                        else {
                            _this.load.dismiss();
                            _this.alrtCtrl.create({
                                title: 'Reset Student Report',
                                subTitle: 'You can\'t reset report for mor than one student',
                                buttons: ['Ok']
                            });
                        }
                    }
                }
            ]
        }).present();
    };
    ReportTemplatePage.prototype.presentToast = function (message) {
        var toast = this.toastCtrl.create({
            message: message,
            duration: 3000,
            position: 'bottom'
        });
        toast.onDidDismiss(function () {
            console.log('Dismissed toast');
        });
        toast.present();
    };
    ReportTemplatePage.prototype.saveDailyReport = function () {
        var _this = this;
        this.reportSaveORupdates = true;
        var newReport;
        if (this.accountServ.reportId == -1) {
            newReport = {
                "dailyReportAnswersObjectsList": []
            };
        }
        else {
            newReport = {
                "reportAnswersObjectsList": []
            };
        }
        var index = this.selectedClassIndex;
        for (var i = 0; i < this.drQuestion.length; i++) {
            if (this.accountServ.reportId == -1) {
                newReport.dailyReportAnswersObjectsList[i] = {
                    "answer": "",
                    "studentsList": this.selectedListOfStudentsID,
                    "classId": this.selectedClassId,
                    "questionId": this.drQuestion[i].id
                };
            }
            else {
                newReport.reportAnswersObjectsList[i] = {
                    "answer": "",
                    "studentsList": this.selectedListOfStudentsID,
                    "classId": this.selectedClassId,
                    "questionId": this.drQuestion[i].id
                };
            }
            var question = this.drQuestion[i];
            question.questionNumber = i;
            var value = this.getViewAnswers(question.questionNumber);
            var questionTitle = void 0;
            if (this.accountServ.reportId == -1) {
                questionTitle = question.dailyReportQuestionType.title;
            }
            else {
                questionTitle = question.reportQuestionType.title;
            }
            switch (questionTitle) {
                case 'TEXT_QUESTION':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], value);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], value);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                    var selecteditems = this.checkboxFunctionService.convert_CheckListObject_To_DailyReportAnswer(value, question.parametersList);
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], selecteditems);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], selecteditems);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT':
                    var answer = "";
                    var firstTime = true;
                    for (var j_1 = 0; j_1 < question.parametersList.length; j_1++) {
                        if (question.parametersList[j_1].key == "OPTION_ANSWER") {
                            if (value[j_1] == true) {
                                if (firstTime) {
                                    answer = question.parametersList[j_1].value + "$$";
                                    firstTime = false;
                                }
                                else {
                                    answer += question.parametersList[j_1].value + "$$";
                                }
                            }
                        }
                        else if (question.parametersList[j_1].key == "OPTION_HELPER_TEXT") {
                            if (value[j_1] == undefined || value[j_1] == null || value[j_1] == "" || value[j_1] == "undefined") {
                                answer += "";
                            }
                            else {
                                answer += value[j_1];
                            }
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'MULTI_SHORT_TEXT_MULTISELECT_VIEW_SELECTED':
                    selecteditems = this.checkboxFunctionService.convert_CheckListObject_To_DailyReportAnswer(value, question.parametersList);
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], selecteditems);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], selecteditems);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION':
                    answer = "";
                    if (value[1] == undefined) {
                        answer = value[0] + "$$" + "";
                    }
                    else {
                        answer = value[0] + "$$" + value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION':
                    answer = "";
                    if (value[0] == true) {
                        answer = question.parametersList[0].value;
                    }
                    else {
                        answer = value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT':
                    answer = "";
                    if (value[1] == undefined || value[1] == null || value[1] == "") {
                        answer = value[0];
                    }
                    else {
                        answer = value[0] + "$$" + value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN':
                    var counter = 0;
                    var answerValueArray = [];
                    var firstTimeAnswer = true;
                    counter = 0;
                    answer = "";
                    var idAnswer = "";
                    for (var j_2 = 0; j_2 < question.parametersList.length; j_2++) {
                        if (question.parametersList[j_2].key == "OPTION_HELPER_TITLE") {
                        }
                        else if (question.parametersList[j_2].key == "OPTION_HELPER_TEXT") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_2].key;
                            counter++;
                        }
                        else if (question.parametersList[j_2].key == "OPTION_ANSWER") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_2].key;
                            counter++;
                        }
                    }
                    for (var a = 0; a < answerValueArray.length; a++) {
                        if (answerValueArray[a].key == "OPTION_ANSWER") {
                            if (firstTimeAnswer) {
                                firstTimeAnswer = false;
                                if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                    answer += 0;
                                    idAnswer += question.parametersList[a].id;
                                }
                                else {
                                    var n = value[question.parametersList[a].id];
                                    answer += value[a];
                                    idAnswer += question.parametersList[a].id;
                                }
                            }
                            else {
                                if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                    answer += "$$" + 0;
                                    idAnswer += "$$" + question.parametersList[a].id;
                                }
                                else {
                                    answer += "$$" + value[a];
                                    idAnswer += "$$" + question.parametersList[a].id;
                                }
                            }
                        }
                        else if (answerValueArray[a].key == "OPTION_HELPER_TEXT") {
                            if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                answer += "&&" + 0;
                                idAnswer += "$$" + question.parametersList[a].id;
                            }
                            else {
                                answer += "&&" + value[question.parametersList[a].id];
                                idAnswer += "$$" + question.parametersList[a].id;
                            }
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer + "||" + idAnswer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer + "||" + idAnswer);
                    }
                    break;
                case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR':
                case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN':
                    counter = 0;
                    answerValueArray = [];
                    var firstTimeFullAnswer = true;
                    counter = 0;
                    var firstTimeFullArray = true;
                    answer = "";
                    for (var j = 0; j < question.parametersList.length; j++) {
                        if (question.parametersList[j].key == "OPTION_HELPER_TITLE") {
                        }
                        else if (question.parametersList[j].key == "OPTION_DROP_DOWN") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j].key;
                            counter++;
                            firstTimeFullArray = true;
                        }
                        else if (question.parametersList[j].key != "OPTION_HELPER_TITLE" && question.parametersList[j].key != "OPTION_DROP_DOWN") {
                            for (var _i = 0, _a = question.parametersList[j]; _i < _a.length; _i++) {
                                var pram = _a[_i];
                                if (pram.key == "OPTION_ANSWER") {
                                    if (firstTimeFullArray) {
                                        answerValueArray[counter] = {};
                                        answerValueArray[counter].key = pram.key;
                                        counter++;
                                        firstTimeFullArray = false;
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                    }
                    for (var a_1 = 0; a_1 < answerValueArray.length; a_1++) {
                        if (answerValueArray[a_1].key == "OPTION_DROP_DOWN") {
                            if (firstTimeFullAnswer) {
                                firstTimeFullAnswer = false;
                                if (value[a_1] == null || value[a_1] == "" || value[a_1] == " ") {
                                    answer += 0;
                                }
                                else {
                                    var n_1 = value[a_1].indexOf('-');
                                    var initialValue = value[a_1];
                                    answer += initialValue.slice(n_1 + 1);
                                }
                            }
                            else {
                                if (value[a_1] == null || value[a_1] == "" || value[a_1] == " ") {
                                    answer += "&&" + 0;
                                }
                                else {
                                    var n_2 = value[a_1].indexOf('-');
                                    var initialValue = value[a_1];
                                    answer += "&&" + initialValue.slice(n_2 + 1);
                                }
                            }
                        }
                        else if (answerValueArray[a_1].key == "OPTION_ANSWER") {
                            answer += "&&" + value[a_1] + "$$";
                            firstTimeFullAnswer = true;
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED':
                case 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED':
                    counter = 0;
                    answerValueArray = [];
                    firstTimeFullAnswer = true;
                    counter = 0;
                    firstTimeFullArray = true;
                    answer = "";
                    for (var j_3 = 0; j_3 < question.parametersList.length; j_3++) {
                        if (question.parametersList[j_3].key == "OPTION_HELPER_TITLE") {
                        }
                        else if (question.parametersList[j_3].key == "OPTION_HELPER_TEXT") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_3].key;
                            counter++;
                            firstTimeFullArray = true;
                        }
                        else if (question.parametersList[j_3].key != "OPTION_HELPER_TITLE" || question.parametersList[j_3].key != "OPTION_HELPER_TEXT") {
                            if (question.dailyReportQuestionType.title == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
                                for (var _b = 0, _c = question.parametersList[j_3]; _b < _c.length; _b++) {
                                    var pram = _c[_b];
                                    if (pram.key == "OPTION_ANSWER") {
                                        if (firstTimeFullArray) {
                                            answerValueArray[counter] = {};
                                            answerValueArray[counter].key = pram.key;
                                            counter++;
                                            firstTimeFullArray = false;
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                            else {
                                if (question.parametersList[j_3].key == "OPTION_ANSWER") {
                                    if (firstTimeFullArray) {
                                        answerValueArray[counter] = {};
                                        answerValueArray[counter].key = question.parametersList[j_3].key;
                                        counter++;
                                        firstTimeFullArray = false;
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                    }
                    for (var a_2 = 0; a_2 < answerValueArray.length; a_2++) {
                        if (answerValueArray[a_2].key == "OPTION_HELPER_TEXT") {
                            if (firstTimeFullAnswer) {
                                firstTimeFullAnswer = false;
                                if (value[a_2] == null || value[a_2] == "" || value[a_2] == " ") {
                                    answer += 0;
                                }
                                else {
                                    answer += value[a_2];
                                }
                            }
                            else {
                                if (value[a_2] == null || value[a_2] == "" || value[a_2] == " ") {
                                    answer += "&&" + 0;
                                }
                                else {
                                    answer += "&&" + value[a_2];
                                }
                            }
                        }
                        else if (answerValueArray[a_2].key == "OPTION_ANSWER") {
                            answer += "&&" + value[a_2] + "$$";
                            firstTimeFullAnswer = true;
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'CONSTANT_SHORT_HELPER_TEXT_QUESTION':
                case 'CONSTANT_LONG_HELPER_TEXT_QUESTION':
                case 'SHORT_HELPER_TEXT_QUESTION':
                case 'LONG_HELPER_TEXT_QUESTION':
                    answer = "";
                    firstTime = true;
                    for (var j_4 = 0; j_4 < question.parametersList.length; j_4++) {
                        if (value[j_4] == undefined || value[j_4] == null || value[j_4] == "") {
                            value[j_4] = 0;
                        }
                        if (firstTime) {
                            firstTime = false;
                            answer += value[j_4];
                        }
                        else {
                            answer += "$$" + value[j_4];
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
            }
        }
        // if (this.selectedListOfStudentsID.length > 2) {
        this.load = this.loadCtrl.create({
            content: 'Please wait until the save is complete.'
        });
        this.load.present();
        // }
        var searchDate = this.selectedReportDate;
        // if(checkDifferenceWithDatabase) {
        //
        //   var databaseAnswersWithStudents = $scope.TeststudnetsAnswersList;
        //   var databaseAnswers = {};
        //
        //   for (i in $scope.selectedMultiStudent) {
        //     var selectedStudent = $scope.selectedMultiStudent[i];
        //     for (studentID in databaseAnswersWithStudents) {
        //       if (studentID == selectedStudent) {
        //         databaseAnswers = databaseAnswersWithStudents[studentID];
        //       }
        //     }
        //   }
        //
        //   var currentAnswers = newReport.dailyReportAnswersObjectsList;
        //   var answersBeforeEdit = $scope.AnswersBeforeEdit;
        //
        //   for (i in currentAnswers) {
        //     var currentAnswer = currentAnswers[i];
        //     var databaseAnswer = databaseAnswers[i];
        //     var beforeAnswer = answersBeforeEdit[i];
        //     currentAnswer.isEditted = true;
        //     if (currentAnswer.answer == beforeAnswer.answer) {
        //       currentAnswer.isEditted = false;
        //     }
        //   }
        //
        //   for (i in currentAnswers) {
        //     var currentAnswer = currentAnswers[i];
        //     var databaseAnswer = databaseAnswers[i];
        //     if (databaseAnswer && currentAnswer) {
        //       if (!currentAnswer.isEditted) {
        //         currentAnswer.answer = databaseAnswer.answer;
        //       } else if (currentAnswer.answer != databaseAnswer.answer) {
        //         if (currentAnswer.answer == '' || currentAnswer.answer == '||' || currentAnswer.answer == '0$$0') {
        //           currentAnswer.answer = databaseAnswer.answer;
        //           break;
        //         }
        //       }
        //     }
        //   }
        //
        //   var reportAnswers = [];
        //   for (i in currentAnswers) {
        //     var answer = currentAnswers[i];
        //     var obj = {
        //       'answer': answer.answer,
        //       'classId': answer.classId,
        //       'questionId': answer.questionId,
        //       'studentsList': answer.studentsList
        //     };
        //     reportAnswers.push(obj);
        //   }
        //
        //   newDailyReport.dailyReportAnswersObjectsList = reportAnswers;
        // }
        this.dailyReportServ.saveReport(newReport, searchDate, this.reportId).subscribe(function (response) {
            _this.load.dismiss();
            var successMsg;
            successMsg = 'Report saved successfully.';
            _this.presentToast(successMsg);
            if (_this.selectedListOfStudentsID.length == 1) {
                ///Get the next student in list if there is one
                _this.getNextStudent();
            }
            else {
                for (var _i = 0, _a = _this.selectedListOfStudents; _i < _a.length; _i++) {
                    var student = _a[_i];
                    student.reportFinalized = true;
                }
            }
        }, function (reason) {
            /*
             * console .error('Error:
             * dailyReport.module>DailyReportCtrl>saveDailyReport> cannot save
             * dailyReportTemplate - ' + reason);
             */
            console.log(reason);
            _this.load.dismiss();
            var errorMsg;
            if (_this.accountServ.reportId == -1) {
                errorMsg = 'Problem saving daily report.';
            }
            else {
                errorMsg = 'Problem saving report.';
            }
            _this.alrtCtrl.create({
                title: 'Failed',
                subTitle: errorMsg,
                buttons: ['Ok']
            }).present();
        });
    };
    ReportTemplatePage.prototype.getViewAnswers = function (questionNumber) {
        if (this.accountServ.reportId == -1) {
            return this.reportAnswer.dailyReportAnswersObjectsList[questionNumber].answer;
        }
        else {
            return this.reportAnswer.reportAnswersObjectsList[questionNumber].answer;
        }
    };
    ReportTemplatePage.prototype.mappingAnswers = function (reportObject, value) {
        return reportObject.answer = value;
    };
    ReportTemplatePage.prototype.updateDailyReport = function () {
        var _this = this;
        this.reportSaveORupdates = true;
        // $rootScope.isdisabled = true;
        var index = this.selectedClassIndex;
        var newReport;
        if (this.accountServ.reportId == -1) {
            newReport = {
                "dailyReportAnswersObjectsList": []
            };
        }
        else {
            newReport = {
                "reportAnswersObjectsList": []
            };
        }
        for (var i = 0; i < this.drQuestion.length; i++) {
            if (this.accountServ.reportId == -1) {
                newReport.dailyReportAnswersObjectsList[i] = {
                    "answer": "",
                    "studentsList": this.selectedListOfStudentsID,
                    "classId": this.selectedClassId,
                    "questionId": this.drQuestion[i].id
                };
            }
            else {
                newReport.reportAnswersObjectsList[i] = {
                    "answer": "",
                    "studentsList": this.selectedListOfStudentsID,
                    "classId": this.selectedClassId,
                    "reportId": this.accountServ.reportId,
                    "questionId": this.drQuestion[i].id
                };
            }
            var question = this.drQuestion[i];
            question.questionNumber = i;
            var value = this.getViewAnswers(question.questionNumber);
            var questionTitle = void 0;
            if (this.accountServ.reportId == -1) {
                questionTitle = question.dailyReportQuestionType.title;
            }
            else {
                questionTitle = question.reportQuestionType.title;
            }
            switch (questionTitle) {
                case 'TEXT_QUESTION':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], value);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], value);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
                case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                    var selecteditems = this.checkboxFunctionService.convert_CheckListObject_To_DailyReportAnswer(value, question.parametersList);
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], selecteditems);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], selecteditems);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT':
                    var answer = "";
                    var firstTime = true;
                    for (var j = 0; j < question.parametersList.length; j++) {
                        if (question.parametersList[j].key == "OPTION_ANSWER") {
                            if (value[j] == true) {
                                if (firstTime) {
                                    answer = question.parametersList[j].value;
                                    firstTime = false;
                                }
                                else {
                                    answer += "$$" + question.parametersList[j].value;
                                }
                            }
                        }
                        else if (question.parametersList[j].key == "OPTION_HELPER_TEXT") {
                            if (value[j] == undefined || value[j] == null || value[j] == "" || value[j] == "undefined") {
                                answer += "$$";
                            }
                            else {
                                answer += "$$" + value[j];
                            }
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT':
                    answer = "";
                    if (value[1] == undefined || value[1] == null || value[1] == "") {
                        answer = value[0];
                    }
                    else {
                        answer = value[0] + "$$" + value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION':
                    if (value[1] == undefined) {
                        answer = value[0] + "$$" + "";
                    }
                    else {
                        if (value[0] == "" && value[1].length > 0) {
                            value[0] = this.KEEP_ORIGINAL_PATERN;
                        }
                        else if (value[0] == "") {
                            value[0] = this.drQuestion[i].parametersList[0].value;
                        }
                        answer = value[0] + "$$" + value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION':
                    answer = "";
                    if (value[0] == true) {
                        answer = question.parametersList[0].value;
                    }
                    else {
                        answer = value[1];
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR':
                case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN':
                    var counter = 0;
                    var answerValueArray = [];
                    var firstTimeAnswer = true;
                    counter = 0;
                    answer = "";
                    var idAnswer = "";
                    for (var j_5 = 0; j_5 < question.parametersList.length; j_5++) {
                        if (question.parametersList[j_5].key == "OPTION_HELPER_TITLE") {
                        }
                        else if (question.parametersList[j_5].key == "OPTION_HELPER_TEXT") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_5].key;
                            counter++;
                        }
                        else if (question.parametersList[j_5].key == "OPTION_ANSWER") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_5].key;
                            counter++;
                        }
                    }
                    for (var a = 0; a < answerValueArray.length; a++) {
                        if (answerValueArray[a].key == "OPTION_ANSWER") {
                            if (firstTimeAnswer) {
                                firstTimeAnswer = false;
                                if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                    answer += 0;
                                    idAnswer += question.parametersList[a].id;
                                }
                                else {
                                    var n = value[question.parametersList[a].id];
                                    answer += question.parametersList[a].value;
                                    idAnswer += question.parametersList[a].id;
                                }
                            }
                            else {
                                if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                    answer += "$$" + 0;
                                    idAnswer += "$$" + question.parametersList[a].id;
                                }
                                else {
                                    answer += "$$" + question.parametersList[a].value;
                                    idAnswer += "$$" + question.parametersList[a].id;
                                }
                            }
                        }
                        else if (answerValueArray[a].key == "OPTION_HELPER_TEXT") {
                            if (value[question.parametersList[a].id] == null || value[question.parametersList[a].id] == "" || value[question.parametersList[a].id] == " ") {
                                answer += "&&" + 0;
                                idAnswer += "$$" + question.parametersList[a].id;
                            }
                            else {
                                answer += "&&" + value[question.parametersList[a].id];
                                idAnswer += "$$" + question.parametersList[a].id;
                            }
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer + "||" + idAnswer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer + "||" + idAnswer);
                    }
                    break;
                case 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED':
                case 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED':
                    counter = 0;
                    answerValueArray = [];
                    var firstTimeFullAnswer = true;
                    counter = 0;
                    var firstTimeFullArray = true;
                    answer = "";
                    var defaultAnswerForMulti = null;
                    if (this.overrideAnswer) {
                        for (var j_6 = 0; j_6 < question.parametersList.length; j_6++) {
                            if (question.parametersList[j_6].key == "OPTION_HELPER_TITLE") {
                            }
                            else if (question.parametersList[j_6].key == "OPTION_HELPER_TEXT") {
                                answerValueArray[counter] = {};
                                answerValueArray[counter].key = question.parametersList[j_6].key;
                                counter++;
                                firstTimeFullArray = true;
                            }
                            else if (question.parametersList[j_6].key != "OPTION_HELPER_TITLE" || question.parametersList[j_6].key != "OPTION_HELPER_TEXT") {
                                if (question.dailyReportQuestionType.title == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
                                    for (var _i = 0, _a = question.parametersList[j_6]; _i < _a.length; _i++) {
                                        var pram = _a[_i];
                                        if (pram.key == "OPTION_ANSWER") {
                                            if (firstTimeFullArray) {
                                                answerValueArray[counter] = {};
                                                answerValueArray[counter].key = pram.key;
                                                counter++;
                                                firstTimeFullArray = false;
                                            }
                                            else {
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (question.parametersList[j_6].key == "OPTION_ANSWER") {
                                        if (firstTimeFullArray) {
                                            answerValueArray[counter] = {};
                                            answerValueArray[counter].key = question.parametersList[j_6].key;
                                            counter++;
                                            firstTimeFullArray = false;
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                        }
                        for (var a = 0; a < answerValueArray.length; a++) {
                            if (answerValueArray[a].key == "OPTION_HELPER_TEXT") {
                                if (firstTimeFullAnswer) {
                                    firstTimeFullAnswer = false;
                                    if (value[a] == null || value[a] == "" || value[a] == " ") {
                                        answer += 0;
                                    }
                                    else {
                                        answer += value[a];
                                    }
                                }
                                else {
                                    if (value[a] == null || value[a] == "" || value[a] == " ") {
                                        answer += "&&" + 0;
                                    }
                                    else {
                                        answer += "&&" + value[a];
                                    }
                                }
                            }
                            else if (answerValueArray[a].key == "OPTION_ANSWER") {
                                if (question.dailyReportQuestionType.title == "SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED") {
                                    if (value[a] == "") {
                                        value[a] = question.parametersList[1].value;
                                        answer += "&&" + value[a] + "$$";
                                    }
                                    else {
                                        answer += "&&" + value[a] + "$$";
                                    }
                                    firstTimeFullAnswer = true;
                                }
                                else if (question.dailyReportQuestionType.title == "MULTI_SHORT_TEXT_ONE_VIEW_SELECTED") {
                                    if (!defaultAnswerForMulti) {
                                        for (var j_7 = 0; j_7 < question.parametersList.length; j_7++) {
                                            if (question.parametersList[j_7].key == "OPTION_ANSWER") {
                                                defaultAnswerForMulti = question.parametersList[j_7].value;
                                                break;
                                            }
                                        }
                                    }
                                    if (value[a] == "") {
                                        value[a] = defaultAnswerForMulti;
                                        answer += "&&" + value[a] + "$$";
                                    }
                                    else {
                                        answer += "&&" + value[a] + "$$";
                                    }
                                    firstTimeFullAnswer = true;
                                }
                            }
                        }
                        if (this.accountServ.reportId == -1) {
                            this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                        }
                        else {
                            this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                        }
                    }
                    break;
                case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR':
                case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN':
                    counter = 0;
                    answerValueArray = [];
                    firstTimeFullAnswer = true;
                    counter = 0;
                    firstTimeFullArray = true;
                    answer = "";
                    for (var j_8 = 0; j_8 < question.parametersList.length; j_8++) {
                        if (question.parametersList[j_8].key == "OPTION_HELPER_TITLE") {
                        }
                        else if (question.parametersList[j_8].key == "OPTION_DROP_DOWN") {
                            answerValueArray[counter] = {};
                            answerValueArray[counter].key = question.parametersList[j_8].key;
                            counter++;
                            firstTimeFullArray = true;
                        }
                        else if (question.parametersList[j_8].key != "OPTION_HELPER_TITLE" && question.parametersList[j_8].key != "OPTION_DROP_DOWN") {
                            for (var _b = 0, _c = question.parametersList[j_8]; _b < _c.length; _b++) {
                                var pram = _c[_b];
                                if (pram.key == "OPTION_ANSWER") {
                                    if (firstTimeFullArray) {
                                        answerValueArray[counter] = {};
                                        answerValueArray[counter].key = pram.key;
                                        counter++;
                                        firstTimeFullArray = false;
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                    }
                    for (var a = 0; a < answerValueArray.length; a++) {
                        if (answerValueArray[a].key == "OPTION_DROP_DOWN") {
                            if (firstTimeFullAnswer) {
                                firstTimeFullAnswer = false;
                                if (value[a] == null || value[a] == "" || value[a] == " ") {
                                    answer += 0;
                                }
                                else {
                                    var n = value[a].indexOf('-');
                                    var initialValue = value[a];
                                    answer += initialValue.slice(n + 1);
                                }
                            }
                            else {
                                if (value[a] == null || value[a] == "" || value[a] == " ") {
                                    answer += "&&" + 0;
                                }
                                else {
                                    var n = value[a].indexOf('-');
                                    var initialValue = value[a];
                                    answer += "&&" + initialValue.slice(n + 1);
                                }
                            }
                        }
                        else if (answerValueArray[a].key == "OPTION_ANSWER") {
                            answer += "&&" + value[a] + "$$";
                            firstTimeFullAnswer = true;
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
                case 'CONSTANT_SHORT_HELPER_TEXT_QUESTION':
                case 'CONSTANT_LONG_HELPER_TEXT_QUESTION':
                case 'SHORT_HELPER_TEXT_QUESTION':
                case 'LONG_HELPER_TEXT_QUESTION':
                    answer = "";
                    firstTime = true;
                    for (var j_9 = 0; j_9 < question.parametersList.length; j_9++) {
                        if (value[j_9] === undefined || value[j_9] === null || value[j_9] === "") {
                            value[j_9] = 0;
                        }
                        if (firstTime) {
                            firstTime = false;
                            answer += value[j_9];
                        }
                        else {
                            answer += "$$" + value[j_9];
                        }
                    }
                    if (this.accountServ.reportId == -1) {
                        this.mappingAnswers(newReport.dailyReportAnswersObjectsList[i], answer);
                    }
                    else {
                        this.mappingAnswers(newReport.reportAnswersObjectsList[i], answer);
                    }
                    break;
            }
        }
        // if (this.selectedMultiStudent.length > 2) {
        this.load = this.loadCtrl.create({
            content: 'Please wait until the update is complete.'
        });
        this.load.present();
        // }
        // *************
        var searchDate = this.selectedReportDate;
        // if(checkDifferenceWithDatabase) {
        //   var databaseAnswersWithStudents = $scope.TeststudnetsAnswersList;
        //   var databaseAnswers = {};
        //
        //   for (i in $scope.selectedMultiStudent) {
        //     var selectedStudent = $scope.selectedMultiStudent[i];
        //     for (studentID in databaseAnswersWithStudents) {
        //       if (studentID == selectedStudent) {
        //         databaseAnswers = databaseAnswersWithStudents[studentID];
        //       }
        //     }
        //   }
        //
        //   var currentAnswers = newReport.dailyReportAnswersObjectsList;
        //   var answersBeforeEdit = $scope.AnswersBeforeEdit;
        //
        //   for (i in currentAnswers) {
        //     var currentAnswer = currentAnswers[i];
        //     var databaseAnswer = databaseAnswers[i];
        //     var beforeAnswer = answersBeforeEdit[i];
        //     currentAnswer.isEditted = true;
        //     if (currentAnswer && beforeAnswer && currentAnswer.answer == beforeAnswer.answer) {
        //       currentAnswer.isEditted = false;
        //     }
        //   }
        //
        //   for (i in currentAnswers) {
        //     var currentAnswer = currentAnswers[i];
        //     var databaseAnswer = databaseAnswers[i];
        //     if (databaseAnswer && currentAnswer) {
        //       if (!currentAnswer.isEditted) {
        //         currentAnswer.answer = databaseAnswer.answer;
        //       } else if (currentAnswer.answer != databaseAnswer.answer) {
        //         if (currentAnswer.answer == '' || currentAnswer.answer == '||' || currentAnswer.answer == '0$$0') {
        //           currentAnswer.answer = databaseAnswer.answer;
        //           break;
        //         }
        //       }
        //     }
        //   }
        //
        //   var reportAnswers = [];
        //   for (i in currentAnswers) {
        //     var answer = currentAnswers[i];
        //     var obj = {
        //       'answer': answer.answer,
        //       'classId': answer.classId,
        //       'questionId': answer.questionId,
        //       'studentsList': answer.studentsList
        //     };
        //     reportAnswers.push(obj);
        //   }
        //
        //   newDailyReport.dailyReportAnswersObjectsList = reportAnswers;
        //
        //   // ********
        // }
        this.dailyReportServ.updateReport(newReport, searchDate, this.reportId).subscribe(function (response) {
            var successMsg;
            _this.load.dismiss();
            successMsg = 'Report updated successfully.';
            _this.presentToast(successMsg);
            if (_this.selectedListOfStudentsID.length == 1) {
                ///Get the next student in list if there is one
                _this.getNextStudent();
            }
            else {
                for (var _i = 0, _a = _this.selectedListOfStudents; _i < _a.length; _i++) {
                    var student = _a[_i];
                    student.reportFinalized = true;
                }
            }
        }, function (reason) {
            /*
             * console .error('Error:
             * dailyReport.module>DailyReportCtrl>saveDailyReport> cannot save
             * dailyReportTemplate - ' + reason);
             */
            console.log(reason);
            _this.load.dismiss();
            var errorMsg;
            if (_this.accountServ.reportId == -1) {
                errorMsg = 'Problem updating daily report';
            }
            else {
                errorMsg = 'Problem updating report.';
            }
            _this.alrtCtrl.create({
                title: 'Failed',
                subTitle: errorMsg,
                buttons: ['Ok']
            }).present();
        });
    };
    ReportTemplatePage.prototype.getNextStudent = function () {
        var student_list = this.selectedClass.studentsList;
        var lastOneInList = student_list.length;
        if (this.selectedListOfStudents.length == 1) {
            console.log('selectedListOfStudents Number' + this.selectedListOfStudents.length);
            this.nextStudentNumb = this.selectedListOfStudents[0].numberInList + 1;
            if (this.nextStudentNumb < lastOneInList) {
                console.log('selectedListOfStudents Numberin list' + this.selectedListOfStudents[0].numberInList);
                if (this.accountServ.reportId == -1) {
                    this.PageName = student_list[this.nextStudentNumb].studentName + "'s daily report";
                }
                else {
                    this.PageName = student_list[this.nextStudentNumb].studentName + "'s " + this.accountServ.reportPage;
                }
                this.selectedListOfStudents[0] = student_list[this.nextStudentNumb];
                for (var i in this.selectedListOfStudents) {
                    this.selectedListOfStudentsID = [];
                    this.selectedListOfStudentsID.push({ id: this.selectedListOfStudents[i].studentId });
                }
                this.getStudentsAnswer();
            }
        }
    };
    ReportTemplatePage.prototype.getStudentsAnswer = function () {
        var _this = this;
        var loadAnswer = this.loadCtrl.create({
            content: "loading next student answers ..."
        });
        loadAnswer.present();
        this.dailyReportServ.getStudentReportAnswers(this.selectedClassId, this.selectedReportDate, this.reportId).subscribe(function (resp) {
            loadAnswer.dismiss();
            _this.getMultiSelectedStudents(_this.selectedListOfStudentsID[0].id, _this.nextStudentNumb, false, _this.selectedListOfStudents[0].reportFinalized, _this.selectedListOfStudents[0].studentName, _this.selectedClassIndex);
        }, function (err) {
            _this.presentToast("Can't get students reports answer");
            loadAnswer.dismiss();
        });
    };
    ReportTemplatePage.prototype.getMultiSelectedStudents = function (StudentId, index, isChecked, studentFinalized, studentName, classIndex) {
        this.Sellected = 1000;
        this.selectedMultiStudent = [];
        this.isChecked = [];
        this.listOfFinalized = [];
        this.classChecked = [];
        this.studnetsAnswersList = [];
        this.reportQuestions = this.navParams.get('template');
        var idx = this.selectedMultiStudent.indexOf(StudentId);
        if (idx > -1) {
            this.selectedMultiStudent.splice(idx, 1);
            this.isChecked[index] = {};
            this.isChecked[index].checked = false;
            this.listOfFinalized.splice(idx, 1);
        }
        else {
            this.listOfFinalized.push(studentFinalized);
            this.selectedMultiStudent.push(StudentId);
            this.isChecked[index] = {};
            this.isChecked[index].checked = true;
            this.studentsSelected = true;
        }
        this.isNotValid = false;
        this.selectedMultiStudentId = [];
        for (var i = 0; i < this.selectedMultiStudent.length; i++) {
            this.selectedMultiStudentId[i] = {};
            this.selectedMultiStudentId[i].id = this.selectedMultiStudent[i];
        }
        this.getDailyReportData(StudentId, index, this.isChecked[index].checked, 'checkBox', studentName, studentFinalized, classIndex);
    };
    ReportTemplatePage.prototype.getDailyReportData = function (studentId, index, checkedSudent, caller, studentName, studentFinalized, selectedClassIndex) {
        // this.studentName = studentName + '\'s daily report';
        var studentID = studentId;
        if (caller == 'checkBox' && checkedSudent == true) {
            this.classChecked[selectedClassIndex] = {};
            this.classChecked[selectedClassIndex].selected = false;
            if (this.selectedMultiStudent.length == 1) {
                this.reportAnswerForSelectedStudent = [];
                console.log(this.dailyReportServ.reportClassQuestionsGroups);
                for (var _i = 0, _a = Object.keys(this.dailyReportServ.reportClassQuestionsGroups); _i < _a.length; _i++) {
                    var qId = _a[_i];
                    console.log(qId);
                    for (var _b = 0, _c = Object.keys(this.dailyReportServ.reportClassQuestionsGroups[qId]); _b < _c.length; _b++) {
                        var answer = _c[_b];
                        console.log(answer);
                        for (var _d = 0, _e = this.dailyReportServ.reportClassQuestionsGroups[qId][answer]; _d < _e.length; _d++) {
                            var answerTemp = _e[_d];
                            console.log(answerTemp);
                            console.log(studentID);
                            if (answerTemp == studentID) {
                                this.reportAnswerForSelectedStudent.push({ "questionId": qId, "answer": answer });
                                console.log(this.reportAnswerForSelectedStudent);
                            }
                        }
                    }
                }
                console.log(this.reportAnswerForSelectedStudent.length);
                if (this.reportAnswerForSelectedStudent.length == 0) {
                    this.isSave = true;
                    this.isNotValid = false;
                    this.resetReportTemplate(null, null);
                }
                else {
                    this.studnetsAnswersList[studentId] = this.reportAnswerForSelectedStudent;
                    this.isNotValid = false;
                    this.isSave = false;
                    this.reverseAnswerToViewAnswer(this.reportAnswerForSelectedStudent);
                }
            }
            else if (this.selectedMultiStudent.length > 1) {
                if (this.isChecked[index].checked) {
                    this.reportAnswerForSelectedStudent = [];
                    console.log(this.dailyReportServ.reportClassQuestionsGroups);
                    for (var _f = 0, _g = Object.keys(this.dailyReportServ.reportClassQuestionsGroups); _f < _g.length; _f++) {
                        var qId = _g[_f];
                        console.log(qId);
                        for (var _h = 0, _j = Object.keys(this.dailyReportServ.reportClassQuestionsGroups[qId]); _h < _j.length; _h++) {
                            var answer = _j[_h];
                            console.log(answer);
                            for (var _k = 0, _l = this.dailyReportServ.reportClassQuestionsGroups[qId][answer]; _k < _l.length; _k++) {
                                var answerTemp = _l[_k];
                                console.log(answerTemp);
                                console.log(studentID);
                                if (answerTemp == studentID) {
                                    this.reportAnswerForSelectedStudent.push({ "questionId": qId, "answer": answer });
                                    console.log(this.reportAnswerForSelectedStudent);
                                }
                            }
                        }
                    }
                    if (this.reportAnswerForSelectedStudent.length == 0) {
                        this.isSave = true;
                        this.isNotValid = false;
                        var idx = this.listOfFinalized.indexOf(true);
                        if (idx == -1) {
                            this.isNotValid = false;
                            this.isSave = true;
                            this.firstStudentId = this.selectedMultiStudent[0];
                        }
                        else {
                            this.isNotValid = false;
                            this.isSave = false;
                            this.firstStudentId = this.selectedMultiStudent[0];
                        }
                    }
                    else {
                        this.studnetsAnswersList[studentId] = this.reportAnswerForSelectedStudent;
                        for (var i = 0; i < this.reportAnswerForSelectedStudent.length; i++) {
                            var questionIdGroup = this.dailyReportServ.reportClassQuestionsGroups[this.reportAnswerForSelectedStudent[i].questionId];
                            var sameAnswerStudentsIds = questionIdGroup[this.reportAnswerForSelectedStudent[i].answer];
                            var sameAnswers = true;
                            var _loop_2 = function (key) {
                                var intKey_1 = parseInt(key, 10);
                                if (!sameAnswerStudentsIds.some(function (e) { return e === intKey_1; })) {
                                    sameAnswers = false;
                                    return "break";
                                }
                            };
                            for (var _m = 0, _o = this.studnetsAnswersList; _m < _o.length; _m++) {
                                var key = _o[_m];
                                var state_1 = _loop_2(key);
                                if (state_1 === "break")
                                    break;
                            }
                            this.questionsToBeReset[i] = sameAnswers;
                        }
                        this.resetReportTemplate(this.questionsToBeReset, this.reportAnswerForSelectedStudent);
                        this.isNotValid = false;
                        this.isSave = false;
                    }
                }
            }
        }
        else if (caller == 'checkBox' && checkedSudent == false) {
            this.studnetsAnswersList.splice(studentId, 1);
            if (this.studnetsAnswersList.length < 1) {
                this.resetReportTemplate(null, null);
            }
            else {
                this.reportAnswerForSelectedStudent = [];
                var oneStudentCheckedId = parseInt(Object.keys(this.studnetsAnswersList)[0], 10);
                console.log(this.dailyReportServ.reportClassQuestionsGroups);
                for (var _p = 0, _q = Object.keys(this.dailyReportServ.reportClassQuestionsGroups); _p < _q.length; _p++) {
                    var qId = _q[_p];
                    console.log(qId);
                    for (var _r = 0, _s = Object.keys(this.dailyReportServ.reportClassQuestionsGroups[qId]); _r < _s.length; _r++) {
                        var answer = _s[_r];
                        console.log(answer);
                        for (var _t = 0, _u = this.dailyReportServ.reportClassQuestionsGroups[qId][answer]; _t < _u.length; _t++) {
                            var answerTemp = _u[_t];
                            console.log(answerTemp);
                            console.log(studentID);
                            if (answerTemp == oneStudentCheckedId) {
                                this.reportAnswerForSelectedStudent.push({ "questionId": qId, "answer": answer });
                                console.log(this.reportAnswerForSelectedStudent);
                            }
                        }
                    }
                }
                if (this.reportAnswerForSelectedStudent.length == 0) {
                    this.isSave = true;
                    this.isNotValid = false;
                    this.resetReportTemplate(null, null);
                }
                else {
                    this.isNotValid = false;
                    this.isSave = false;
                }
                for (var i_2 = 0; i_2 < this.reportAnswerForSelectedStudent.length; i_2++) {
                    var questionIdGroup_1 = this.dailyReportServ.reportClassQuestionsGroups[this.reportAnswerForSelectedStudent[i_2].questionId];
                    var sameAnswerStudentsIds_1 = questionIdGroup_1[this.reportAnswerForSelectedStudent[i_2].answer];
                    var sameAnswers_1 = true;
                    for (var _v = 0, _w = this.studnetsAnswersList; _v < _w.length; _v++) {
                        var key = _w[_v];
                        var intKey = parseInt(key, 10);
                        if (!sameAnswerStudentsIds_1.includes(intKey)) {
                            sameAnswers_1 = false;
                            break;
                        }
                    }
                    this.questionsToBeReset[i_2] = sameAnswers_1;
                }
                this.resetReportTemplate(this.questionsToBeReset, this.reportAnswerForSelectedStudent);
            }
            if (this.selectedMultiStudent.length == 1) {
                for (var j = 0; j < this.selectedClass.studentsList.length; j++) {
                    if (this.selectedClass.studentsList[j].id == this.selectedMultiStudentId[0].id) {
                        // this.studentName = this.classesList[selectedClassIndex].studentsList[j].name + '\'s daily report';
                        break;
                    }
                }
            }
        }
        console.log(this.reportAnswerForSelectedStudent);
        console.log(this.selectedMultiStudentId);
        console.log(this.reportAnswer);
        console.log(this.isChecked);
    };
    ReportTemplatePage.prototype.resetReportTemplate = function (questionsToBeReset, answers) {
        if (!questionsToBeReset) {
            for (var i = 0; i < this.reportQuestions.length; i++) {
                if (this.accountServ.reportId == -1) {
                    this.mappingDefaultAnswers(this.reportAnswer.dailyReportAnswersObjectsList[i], this.reportQuestions[i]);
                }
                else {
                    this.mappingDefaultAnswers(this.reportAnswer.reportAnswersObjectsList[i], this.reportQuestions[i]);
                }
                // $('#' + $scope.reportQuestions[i].id).addClass("ng-hide");
                // this.studentName = "";
            }
        }
        else {
            for (var i = 0; i < this.reportQuestions.length; i++) {
                if (!questionsToBeReset[i]) {
                    // not same answer>>> display empty answer.
                    // $('#' + $scope.reportQuestions[i].id).removeClass("ng-hide");
                    // mappingDefaultAnswers(
                    // $scope.reportAnswer.dailyReportAnswersObjectsList[i],
                    // $scope.reportQuestions[i]);
                    var questionTitle = void 0;
                    if (this.accountServ.reportId == -1) {
                        questionTitle = this.reportQuestions[i].dailyReportQuestionType.title;
                    }
                    else {
                        questionTitle = this.reportQuestions[i].reportQuestionType.title;
                    }
                    switch (questionTitle) {
                        case "TEXT_QUESTION":
                        case "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER":
                            if (this.accountServ.reportId == -1) {
                                this.reportAnswer.dailyReportAnswersObjectsList[i] = {
                                    "answer": ""
                                };
                            }
                            else {
                                this.reportAnswer.reportAnswersObjectsList[i] = {
                                    "answer": ""
                                };
                            }
                            break;
                        case "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION":
                            if (this.accountServ.reportId == -1) {
                                this.reportAnswer.dailyReportAnswersObjectsList[i] = {
                                    "answer": ["", ""]
                                };
                            }
                            else {
                                this.reportAnswer.reportAnswersObjectsList[i] = {
                                    "answer": ["", ""]
                                };
                            }
                            break;
                        default:
                            var questionTitle_1 = void 0;
                            if (this.accountServ.reportId == -1) {
                                questionTitle_1 = this.reportQuestions[i].dailyReportQuestionType.title;
                            }
                            else {
                                questionTitle_1 = this.reportQuestions[i].reportQuestionType.title;
                            }
                            if (questionTitle_1 == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED' || questionTitle_1 == 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED') {
                                this.overrideAnswer = true;
                            }
                            if (this.reportQuestions[i].parametersList) {
                                var emptyAnswer = [];
                                for (var j = 0; j < this.reportQuestions[i].parametersList.length; j++) {
                                    emptyAnswer.push("");
                                }
                                if (this.accountServ.reportId == -1) {
                                    this.reportAnswer.dailyReportAnswersObjectsList[i] = {
                                        "answer": emptyAnswer
                                    };
                                }
                                else {
                                    this.reportAnswer.reportAnswersObjectsList[i] = {
                                        "answer": emptyAnswer
                                    };
                                }
                            }
                            break;
                    }
                }
                else {
                    if (this.accountServ.reportId == -1) {
                        this.reportAnswer.dailyReportAnswersObjectsList[i].answer = this.getViewQuestionAnswer(this.reportQuestions[i], answers[i].answer);
                    }
                    else {
                        this.reportAnswer.reportAnswersObjectsList[i].answer = this.getViewQuestionAnswer(this.reportQuestions[i], answers[i].answer);
                    }
                    // $('#' + $scope.reportQuestions[i].id).addClass("ng-hide");
                }
            }
        }
    };
    ReportTemplatePage.prototype.getViewQuestionAnswer = function (question, dbAnswer) {
        var questionTitle;
        if (this.accountServ.reportId == -1) {
            questionTitle = question.dailyReportQuestionType.title;
        }
        else {
            questionTitle = question.reportQuestionType.title;
        }
        switch (questionTitle) {
            case 'TEXT_QUESTION':
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return "";
                }
                return dbAnswer;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                var midResult = dbAnswer.split("||");
                var arrayIds = midResult[1].split("$$");
                var value = {};
                for (var i = 0; i < arrayIds.length; i++) {
                    value[arrayIds[i]] = true;
                }
                return value;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                var answersList = dbAnswer.split("$$");
                value = {};
                for (var i = 0; i < question.parametersList.length; i++) {
                    if (question.parametersList[i].key == "OPTION_ANSWER") {
                        if (answersList.indexOf(question.parametersList[i].value) > -1) {
                            value[i] = true;
                        }
                        else {
                            value[i] = false;
                        }
                    }
                    else if (question.parametersList[i].key == "OPTION_HELPER_TEXT") {
                        if (answersList[answersList.length - 1] == null || answersList[answersList.length - 1] == "" || answersList[answersList.length - 1] == " " || answersList[answersList.length - 1] == undefined || answersList[answersList.length - 1] == "undefined") {
                            value[i] = "";
                        }
                        else {
                            value[i] = answersList[answersList.length - 1];
                        }
                    }
                }
                return value;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                answersList = dbAnswer.split("$$");
                value = {};
                value[0] = answersList[0];
                if (answersList[1] == null || answersList[1] == "" || answersList[1] == " ") {
                }
                else {
                    value[1] = answersList[1];
                }
                return value;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                answersList = dbAnswer.split("$$");
                value = {};
                value[0] = answersList[0];
                value[1] = answersList[1];
                return value;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                value = {};
                if (dbAnswer == question.parametersList[0].value) {
                    value[0] = true;
                }
                else {
                    value[0] = false;
                    value[1] = dbAnswer;
                }
                return value;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN':
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                midResult = dbAnswer.split("||");
                var arrayValues = midResult[0].split(/[$&]+/);
                arrayIds = midResult[1].split(/[$&]+/);
                value = {};
                for (var i = 0; i < arrayIds.length; i++) {
                    if ((i % 2) == 0) {
                        if (arrayValues[i] == null || arrayValues[i] == "" || arrayValues[i] == " " || arrayValues[i] == "0") {
                            value[arrayIds[i]] = false;
                        }
                        else {
                            value[arrayIds[i]] = true;
                        }
                    }
                    else {
                        if (arrayValues[i] == "0") {
                            value[arrayIds[i]] = "";
                        }
                        else {
                            value[arrayIds[i]] = arrayValues[i];
                        }
                    }
                }
                return value;
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR':
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN':
                var counter = 0;
                var getAnswerValueArray = [];
                var firstTimeFullArray = true;
                var questionCount = 0;
                for (var j = 0; j < question.parametersList.length; j++) {
                    if (question.parametersList[j].key == "OPTION_HELPER_TITLE") {
                    }
                    else if (question.parametersList[j].key == "OPTION_DROP_DOWN") {
                        getAnswerValueArray[counter] = {};
                        getAnswerValueArray[counter].key = question.parametersList[j].key;
                        counter++;
                        firstTimeFullArray = true;
                    }
                    else if (question.parametersList[j].key != "OPTION_HELPER_TITLE" && question.parametersList[j].key != "OPTION_DROP_DOWN") {
                        for (var _i = 0, _a = question.parametersList[j]; _i < _a.length; _i++) {
                            var pram = _a[_i];
                            if (pram.key == "OPTION_ANSWER") {
                                if (firstTimeFullArray) {
                                    getAnswerValueArray[counter] = {};
                                    getAnswerValueArray[counter].key = pram.key;
                                    counter++;
                                    firstTimeFullArray = false;
                                }
                                else {
                                }
                            }
                        }
                    }
                }
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                var answersQuestionList = dbAnswer.replace(/&/g, "$").split("$$");
                value = {};
                for (var i = 0; i < getAnswerValueArray.length; i++) {
                    if (answersQuestionList[i] == 0) {
                        value[i] = "";
                    }
                    else {
                        value[i] = answersQuestionList[i];
                    }
                }
                return value;
            case 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED':
            case 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED':
                counter = 0;
                getAnswerValueArray = [];
                firstTimeFullArray = true;
                questionCount = 0;
                for (var j = 0; j < question.parametersList.length; j++) {
                    if (question.parametersList[j].key == "OPTION_HELPER_TITLE") {
                    }
                    else if (question.parametersList[j].key == "OPTION_HELPER_TEXT") {
                        getAnswerValueArray[counter] = {};
                        getAnswerValueArray[counter].key = question.parametersList[j].key;
                        counter++;
                        firstTimeFullArray = true;
                    }
                    if (question.dailyReportQuestionType.title == 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED') {
                        for (var _b = 0, _c = question.parametersList[j]; _b < _c.length; _b++) {
                            var pram = _c[_b];
                            if (pram.key == "OPTION_ANSWER") {
                                if (firstTimeFullArray) {
                                    getAnswerValueArray[counter] = {};
                                    getAnswerValueArray[counter].key = pram.key;
                                    counter++;
                                    firstTimeFullArray = false;
                                }
                                else {
                                }
                            }
                        }
                    }
                    else {
                        if (question.parametersList[j].key == "OPTION_ANSWER") {
                            if (firstTimeFullArray) {
                                getAnswerValueArray[counter] = {};
                                getAnswerValueArray[counter].key = question.parametersList[j].key;
                                counter++;
                                firstTimeFullArray = false;
                            }
                            else {
                            }
                        }
                    }
                }
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                // var answersQuestionList =
                // dbAnswer.split("||");
                answersQuestionList = dbAnswer.replace(/&/g, "$").split("$$");
                value = {};
                for (var i = 0; i < getAnswerValueArray.length; i++) {
                    value[i] = answersQuestionList[i];
                }
                console.log('SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED');
                console.log(value);
                return value;
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR':
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN':
                counter = 0;
                getAnswerValueArray = [];
                firstTimeFullArray = true;
                questionCount = 0;
                for (var j = 0; j < question.parametersList.length; j++) {
                    if (question.parametersList[j].key == "OPTION_HELPER_TITLE") {
                    }
                    else if (question.parametersList[j].key == "OPTION_DROP_DOWN") {
                        getAnswerValueArray[counter] = {};
                        getAnswerValueArray[counter].key = question.parametersList[j].key;
                        counter++;
                        firstTimeFullArray = true;
                    }
                    else if (question.parametersList[j].key != "OPTION_HELPER_TITLE" && question.parametersList[j].key != "OPTION_DROP_DOWN") {
                        for (var _d = 0, _e = question.parametersList[j]; _d < _e.length; _d++) {
                            var pram = _e[_d];
                            if (firstTimeFullArray) {
                                getAnswerValueArray[counter] = {};
                                getAnswerValueArray[counter].key = pram.key;
                                counter++;
                                firstTimeFullArray = false;
                                questionCount++;
                            }
                            else {
                            }
                        }
                    }
                }
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                answersQuestionList = dbAnswer.replace(/&/g, "$").split("$$");
                value = {};
                for (var i = 0; i < getAnswerValueArray.length; i++) {
                    value[i] = answersQuestionList[i];
                }
                return value;
            case 'CONSTANT_SHORT_HELPER_TEXT_QUESTION':
            case 'CONSTANT_LONG_HELPER_TEXT_QUESTION':
            case 'SHORT_HELPER_TEXT_QUESTION':
            case 'LONG_HELPER_TEXT_QUESTION':
                if (dbAnswer == null || dbAnswer == "" || dbAnswer == " ") {
                    return {};
                }
                answersList = dbAnswer.split("$$");
                value = {};
                for (var i = 0; i < question.parametersList.length; i++) {
                    value[i] = answersList[i];
                }
                return value;
        }
    };
    ReportTemplatePage.prototype.reverseAnswerToViewAnswer = function (reportAnswerDb) {
        var reportAnswerView;
        if (this.accountServ.reportId == -1) {
            reportAnswerView = {
                "dailyReportAnswersObjectsList": []
            };
        }
        else {
            reportAnswerView = {
                "reportAnswersObjectsList": []
            };
        }
        for (var i = 0; i < this.reportQuestions.length; i++) {
            var question = this.reportQuestions[i];
            if (this.accountServ.reportId == -1) {
                reportAnswerView.dailyReportAnswersObjectsList[i] = {
                    "answer": this.getViewQuestionAnswer(question, reportAnswerDb[i].answer)
                };
            }
            else {
                reportAnswerView.reportAnswersObjectsList[i] = {
                    "answer": this.getViewQuestionAnswer(question, reportAnswerDb[i].answer)
                };
            }
        }
        this.reportAnswer = reportAnswerView;
    };
    ReportTemplatePage.prototype.onClickonMenuCalenderFromReport = function () {
        var _this = this;
        var date = this.selectedReportDate.split('-');
        var year = date[2];
        var month = date[1];
        var day = date[0];
        var dateMaxmum = this.tranformDate.transformTheDate(new Date(), 'dd-MM-yyyy');
        var dateMaxData = dateMaxmum.split('-');
        var yearMaxmum = +dateMaxData[2];
        var monthMaxmum = +dateMaxData[1];
        var dayMaxmum = +dateMaxData[0];
        this.datePicker.show({
            date: new Date(year, month - 1, day),
            mode: 'date',
            androidTheme: this.datePicker.ANDROID_THEMES.THEME_DEVICE_DEFAULT_LIGHT,
            minDate: new Date(2014, 0, 1).valueOf(),
            maxDate: new Date(yearMaxmum, (monthMaxmum - 1), dayMaxmum).valueOf(),
            allowFutureDates: false
        }).then(function (date) {
            console.log('Got date: ', _this.tranformDate.transformTheDate(date, 'dd-MM-yyyy'));
            _this.presentToast(_this.tranformDate.transformTheDate(date, 'dd-MM-yyyy'));
            _this.selectedReportDate = _this.tranformDate.transformTheDate(date, 'dd-MM-yyyy');
            _this.reportDate = _this.tranformDate.transformTheDate(date, 'dd/MM/yyyy');
            _this.getStudentsAnswer();
        }, function (err) {
            console.log('Error occurred while getting date: ', err);
        });
    };
    ReportTemplatePage = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'page-report-template',template:/*ion-inline-start:"D:\Entrepreware\Edufy-mostafa\src\pages\report-template\report-template.html"*/'<ion-header>\n\n  <ion-navbar color="primary">\n\n    <ion-buttons left>\n\n      <button ion-button icon-only (click)="close()">\n\n        <ion-icon name="close"></ion-icon>\n\n      </button>\n\n    </ion-buttons>\n\n    <ion-title text-center (click)="showNames()">{{PageName}}</ion-title>\n\n    <ion-buttons right>\n\n      <button ion-button icon-only (click)="onClickonMenuCalenderFromReport()">\n\n        <ion-icon name="md-calendar"></ion-icon>\n\n      </button>\n\n    </ion-buttons>\n\n  </ion-navbar>\n\n</ion-header>\n\n\n\n\n\n<ion-content padding class="contentColor">\n\n\n\n  <ion-card style="border-radius: 15px;margin-left: 0;margin-right: 0;width: 100%;">\n\n    <div justify-content-center text-center class="dateTopCenterBoldGray">\n\n      <b>{{reportDate}}</b>\n\n    </div>\n\n  </ion-card>\n\n  <ion-card style="border-radius: 10px; padding-bottom: 10px;margin-left: 0;margin-right: 0;width: 100%;margin-bottom: 39px;"  *ngIf="accountServ.reportId == -1">\n\n    <div style="padding-bottom: 0;padding-right: 10px;padding-left: 10px;padding-top: 10px" *ngFor="let itm of drQuestion; let drIndex = index">\n\n\n\n\n\n      <!--Type "TEXT_QUESTION"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <label class="textarea">\n\n    <textarea rows="3" class="custom-scroll" style="width: 100%" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer" (change)="dataChanges()">\n\n    </textarea>\n\n        </label>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER"-->\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\' ||\n\n                  itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="inline-group">\n\n          <div *ngFor="let parameter of itm.parametersList" class="LopContain" >\n\n            <label >\n\n              <input class="checkbox" type="checkbox"  [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[parameter.id]" (change)="dataChanges()">\n\n              <i></i>\n\n              {{parameter.value}}\n\n            </label>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN"-->\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN\' ||\n\n                  itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div *ngFor="let param of itm.parametersList; let i = index" style="display: block;width: 100%">\n\n\n\n          <div *ngIf="param.key == \'OPTION_ANSWER\'" >\n\n            <div class="inline-group">\n\n              <label  col-md-9 col-sm-9 col-xs-9>\n\n                <input class="checkbox" type="checkbox" [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[itm.parametersList[i].id]">\n\n                <i></i>\n\n                <input (change)="dataChanges()" type="number" required [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[(itm.parametersList[i].id)+1]" style="width:50px;height: 25px;left: 0px;position: relative;margin-left: 10px;margin-right: 10px;padding-bottom: 4px;top: -5px;" [disabled]="!reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[itm.parametersList[i].id]">\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="inline-group">\n\n\n\n          <div *ngFor="let pram of itm.parametersList;let i = index" class="LopContain">\n\n            <div *ngIf="pram.key == \'OPTION_ANSWER\'">\n\n\n\n              <label >\n\n                <input (change)="dataChanges()" class="checkbox" type="checkbox" [name]="\'checkbox\' + itm.questionNumber" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]">\n\n                <i></i>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n        <div style=" clear: both;">\n\n          <div *ngFor="let pram of itm.parametersList;let i = index" >\n\n            <div *ngIf="pram.key != \'OPTION_ANSWER\'">\n\n\n\n              <label>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea (change)="dataChanges()" rows="3" cols="50" class="custom-scroll" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]"></textarea>\n\n              </label>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row">\n\n          <div class="col col-12 inline-group">\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n\n\n                <label style="display: inline-block">\n\n                  <input class="radio" type="radio" [name]="\'radio-inline\'+itm.questionNumber" [value]="itm.parametersList[i].value"\n\n                         (change)="enableOther(itm.questionNumber,i)" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                    {{pram.value}}\n\n                </label>\n\n\n\n\n\n              </div>\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER_WITH_EDIT\'">\n\n\n\n                <div style="display: inline-block">\n\n                  <label >\n\n                    <input class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="itm.parametersList[i].value"\n\n                           (change)="enableOther(itm.questionNumber + \',\' + i)" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                    <i></i>\n\n                        {{pram.value}}\n\n                  </label>\n\n                  <label class="textarea">\n\n                    <textarea (change)="dataChanges()" rows="1" style="width:100%" class="custom-scroll" [disabled]="enableOtherNote[itm.questionNumber]"\n\n                              ng-init="enableOtherNote[\' + drQuestion.questionNumber + \']=\' + true + \'" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                    </textarea>\n\n                  </label>\n\n                </div>\n\n\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div *ngFor="let pram of itm.parametersList" class="LopContain">\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Food\'" style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/food/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Mood\'"style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/mood/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Milk\'"style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/milk/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Label\'">\n\n            <label>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <i></i>\n\n              {{pram.value}}\n\n            </label>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="">\n\n          <div class="inline-group">\n\n\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n                <label >\n\n                  <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                  {{pram.value}}\n\n                </label>\n\n              </div>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n        <div style=" clear: both;" >\n\n\n\n          <div *ngFor="let pram of itm.parametersList; let i = index">\n\n            <div *ngIf="itm.parametersList[i].key != \'OPTION_ANSWER\'">\n\n              <label>\n\n                {{pram.value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea (change)="dataChanges()" rows="2" cols="50" class="custom-scroll" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                </textarea>\n\n              </label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row">\n\n          <div class="col col-12">\n\n\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n                <label >\n\n                  <input (change)="dataChanges()" class="checkbox" type="checkbox" [name]="\'checkbox\' + itm.questionNumber+i"\n\n                         ng-change="disableNote(reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0],itm.questionNumber)"\n\n                         [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                  {{itm.parametersList[i].value}}\n\n                </label>\n\n              </div>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n        <div>\n\n\n\n          <div *ngFor="let pram of itm.parametersList; let i = index">\n\n            <div *ngIf="itm.parametersList[i].key != \'OPTION_ANSWER\'">\n\n              <label>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea (change)="dataChanges()"  [disabled]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[0]"\n\n                           rows="3" class="custom-scroll"\n\n                           [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                </textarea>\n\n              </label>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n\n\n        <div *ngFor=" let pram of itm.parametersList; let i = index">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{itm.parametersList[i].value}} :</label></div><br>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TEXT\'">\n\n            <br>\n\n            <br>\n\n            {{openDataSINGLE_SHORT_TEXT_ONE_VIEW_SELECTED(i)}}\n\n            <section class="col-md-5"><label>{{pram.value}} <br></label><label class="input"><input (change)="dataChanges()" style="width: 100%;height: 30px" type="text" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"></label></section>\n\n            <br>\n\n          </div>\n\n\n\n\n\n          <span *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_HELPER_TEXT\';">\n\n            <span *ngFor="let radio of itm.parametersList[i]; let j = index" style="display: inline-block;padding-right: 20px">\n\n              <label ><input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\'+ SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED_INDEX+1" [value]="radio.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[(i)]" (change)="override()"><i></i>      {{radio.value}} <br></label>\n\n            </span>\n\n          </span>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "MULTI_SHORT_TEXT_ONE_VIEW_SELECTED"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor=" let pram of itm.parametersList; let i = index;">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{pram.value}} :</label></div>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TEXT\'" style="width: 100% !important;display: block">\n\n            {{openDataMULTI_SHORT_TEXT_ONE_VIEW_SELECTED(i)}}\n\n            <section class="col-md-3"><label class="" style="">{{pram.value}}</label><label class="input"><input (change)="dataChanges()" style="width: 100%;height: 30px" type="text" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"></label></section>\n\n            <br>\n\n          </div>\n\n\n\n          <span *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_HELPER_TEXT\';">\n\n            <span style="display: inline-block;width:  100px;">\n\n              <label><input (change)="dataChanges()" type="radio" class="radio" [name]="\'radio-inline\'+ itm.questionNumber" [value]="itm.parametersList[i].value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[MULTI_SHORT_TEXT_ONE_VIEW_SELECTED_Index+1]" (change)="override()"><i></i>      {{pram.value}} </label>\n\n            </span>\n\n          </span>\n\n\n\n        </span>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER"-->\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' ||\n\n                  itm.dailyReportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'">\n\n\n\n        <div style="display: inline-block;width: 100%;">\n\n          <label class="formLabel" style="width:initial ;float: left">\n\n          {{itm.question}} :\n\n        </label>\n\n\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n\n\n          <button ion-button icon-only clear style="height: 25px;width: 25px; padding: 0;margin-bottom: 20px;float: right" (click)="editSaveQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == false && showEditButton()" [hidden]="!editQuestionAllowed">\n\n            <ion-icon style="font-size: 20px;" name="create"></ion-icon>\n\n          </button>\n\n\n\n          <button ion-button icon-only clear style="padding: 0; width: 70px;float: right; margin-top: -7px" (click)="cancelEditigQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            cancel\n\n          </button>\n\n\n\n          <button ion-button icon-only clear style="padding: 0;width: 50px;float: right; margin-top: -7px" (click)="editSaveQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            save\n\n          </button>\n\n        </div>\n\n\n\n        <br>\n\n\n\n\n\n        <span *ngFor="let pram of itm.parametersList;let j = index" style="display: block">\n\n          <span *ngIf="pram.key == \'OPTION_HELPER_TEXT\' || pram.key == \'OPTION_ANSWER\'">\n\n            <span style="display: inline-block;width: 100%; margin-bottom: 20px">\n\n              <label style="bottom: 5px; float:left;"><input (change)="dataChanges()" class="checkbox" type="checkbox"  [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[pram.id]">\n\n                <i></i> {{pram.value}} </label>\n\n              <button ion-button icon-only clear style="height: 25px;width: 25px; padding: 0;bottom: 5px;float: right;" (click)="removeQuestionParameter(itm.questionNumber ,pram.id)" *ngIf="itm.editQuestion == true" [disabled]="!editQuestionAllowed">\n\n            <ion-icon style="font-size: 20px;" name="trash"></ion-icon>\n\n          </button>\n\n            </span>\n\n          </span>\n\n        </span>\n\n\n\n        <ion-row style="display: inline-block; width: 100%">\n\n          <input style="width: calc(100% - 50px); height: 40px; padding: 0" (change)="dataChanges()" *ngIf="itm.editQuestion == true" [(ngModel)]="reportQuestionsEditParamTemps[itm.questionNumber].parameters[0].value" class="form-control" placeholder=" Pleas enter your new question" />\n\n          <button ion-button icon-only clear style="width: 40px; height: 40px; padding: 0;margin: 0;float: right" (click)="addParameterForQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            add\n\n          </button>\n\n        </ion-row>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor="let pram of itm.parametersList; let i = index;" class="longOneAnswer">\n\n          <label style="display: inline-block"><input (change)="dataChanges()"  class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" ng-change="enableOther(itm.questionNumber + \',\' + i)" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer"><i></i>     {{pram.value}}</label>\n\n        </span>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "CONSTANT_SHORT_HELPER_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'CONSTANT_SHORT_HELPER_TEXT_QUESTION\';">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor="let pram of itm.parametersList; let k = index;" style="display: block;" >\n\n          <section class="col col-2"><label style="margin-top: 5px"> {{pram.value}}   </label><label class="input"><input (change)="dataChanges()" style="width: 100%;height: 30px;" type="text" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[k]"></label></section>\n\n        </span>\n\n\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n      <!--Type "SHORT_HELPER_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'SHORT_HELPER_TEXT_QUESTION\';let i = index;">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row" style="">\n\n\n\n          <div style="display: inline-block; padding-right: 20px" *ngFor="let pram of itm.parametersList; let TEMP = index">\n\n            <section class="section" style="margin-left: 9px;width: {{100/itm.parametersList.length}} %">\n\n              <label class="formLabel ng-scope" style="margin-top: 5px;font-weight: normal">\n\n                {{pram.value}} :\n\n              </label>\n\n              <br>\n\n              <label class="input">\n\n                <input (change)="dataChanges()" style="width: 70px; height: 35px;" type="text" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[TEMP.toString()]">\n\n              </label>\n\n            </section>\n\n          </div><br>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n      <!--Type "DROPDOWN_MENU_ONE_VIEW_SELECTED_EN"-->\n\n      <!--Type "DROPDOWN_MENU_ONE_VIEW_SELECTED_AR"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title == \'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN\' || itm.dailyReportQuestionType.title == \'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR\';let i = index;">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n\n\n\n\n        <div *ngFor=" let pram of itm.parametersList; let i = index">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{itm.parametersList[i].value}} :</label></div><br>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_DROP_DOWN\'">\n\n            <br>\n\n            {{openDataDROPDOWN_MENU_ONE_VIEW_SELECTED(i)}}\n\n            <ion-label>{{itm.parametersList[i].value}}</ion-label>\n\n            <ion-item style="padding: 0;margin: 0">\n\n              <ion-select (change)="dataChanges()" style="width: 100%;max-width: 100%" [placeholder]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]" multiple="false" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]">\n\n                <ion-option *ngFor="let itmPram of selectionData.get(itm.id)" [value]="itmPram.value">{{itmPram.value}}</ion-option>\n\n              </ion-select>\n\n            </ion-item>\n\n            <br>\n\n          </div>\n\n\n\n\n\n          <div *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_DROP_DOWN\';">\n\n            <div *ngFor="let radio of itm.parametersList[i]; let j = index" style="display: inline-block;padding-right: 20px">\n\n              <label ><input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\'+itm.questionNumber + i" [value]="radio.value" [(ngModel)]="reportAnswer.dailyReportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"><i></i>      {{radio.value}} <br></label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "Else"-->\n\n      <div *ngIf="itm.dailyReportQuestionType.title != \'TEXT_QUESTION\' && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'\n\n       && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN\'\n\n        && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR\' && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT\'\n\n         && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT\' && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'\n\n         && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION\' && itm.dailyReportQuestionType.title != \'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED\'\n\n          && itm.dailyReportQuestionType.title != \'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED\' && itm.dailyReportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'\n\n           && itm.dailyReportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' && itm.dailyReportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'\n\n            && itm.dailyReportQuestionType.title != \'CONSTANT_SHORT_HELPER_TEXT_QUESTION\' && itm.dailyReportQuestionType.title != \'SHORT_HELPER_TEXT_QUESTION\'\n\n             && itm.dailyReportQuestionType.title != \'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN\' && itm.dailyReportQuestionType.title != \'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR\'\n\n              && itm.dailyReportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="row">\n\n          <div class="col col-4">\n\n\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </div>\n\n    <!--<div padding="10px" [innerHTML]="sanitizer.bypassSecurityTrustHtml(reportTemplate)"></div>-->\n\n  </ion-card>\n\n\n\n\n\n                                                          <!--CUSTOM REPORT-->\n\n\n\n\n\n  <ion-card style="border-radius: 10px; padding-bottom: 10px;margin-left: 0;margin-right: 0;width: 100%;margin-bottom: 39px;"  *ngIf="accountServ.reportId != -1">\n\n    <div style="padding-bottom: 0;padding-right: 10px;padding-left: 10px;padding-top: 10px" *ngFor="let itm of drQuestion; let drIndex = index">\n\n\n\n\n\n      <!--Type "TEXT_QUESTION"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <label class="textarea">\n\n    <textarea (change)="dataChanges()" rows="3" class="custom-scroll" style="width: 100%" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer">\n\n    </textarea>\n\n        </label>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER"-->\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\' ||\n\n                  itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="inline-group">\n\n          <div *ngFor="let parameter of itm.parametersList" class="LopContain" >\n\n            <label >\n\n              <input (change)="dataChanges()" class="checkbox" type="checkbox"  [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[parameter.id]">\n\n              <i></i>\n\n              {{parameter.value}}\n\n            </label>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN"-->\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN\' ||\n\n                  itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div *ngFor="let param of itm.parametersList; let i = index" style="display: block">\n\n\n\n          <div *ngIf="param.key == \'OPTION_ANSWER\'" >\n\n            <div class="inline-group">\n\n              <label  col-md-9 col-sm-9 col-xs-9>\n\n                <input (change)="dataChanges()" class="checkbox" type="checkbox" [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[itm.parametersList[i].id]">\n\n                <i></i>\n\n                <input (change)="dataChanges()" type="number" required [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[itm.parametersList[i].id+1]" style="width:50px;height: 25px;left: 0px;position: relative;margin-left: 10px;margin-right: 10px;padding-bottom: 4px;top: -5px;" [disabled]="!reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[itm.parametersList[i].id]">\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="inline-group">\n\n\n\n          <div *ngFor="let pram of itm.parametersList;let i = index" class="LopContain">\n\n            <div *ngIf="pram.key == \'OPTION_ANSWER\'">\n\n\n\n              <label >\n\n                <input (change)="dataChanges()" class="checkbox" type="checkbox" [name]="\'checkbox\' + itm.questionNumber" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]">\n\n                <i></i>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n        <div style=" clear: both;">\n\n          <div *ngFor="let pram of itm.parametersList;let i = index" >\n\n            <div *ngIf="pram.key != \'OPTION_ANSWER\'">\n\n\n\n              <label>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea (change)="dataChanges()" rows="3" cols="50" class="custom-scroll" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]"></textarea>\n\n              </label>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row">\n\n          <div class="col col-12 inline-group">\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n\n\n                <label style="display: inline-block">\n\n                  <input  class="radio" type="radio" [name]="\'radio-inline\'+itm.questionNumber" [value]="itm.parametersList[i].value"\n\n                         (change)="enableOther(itm.questionNumber,i)" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                  {{pram.value}}\n\n                </label>\n\n\n\n\n\n              </div>\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER_WITH_EDIT\'">\n\n\n\n                <div style="display: inline-block">\n\n                  <label >\n\n                    <input class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="itm.parametersList[i].value"\n\n                           (change)="enableOther(itm.questionNumber + \',\' + i)" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                    <i></i>\n\n                    {{pram.value}}\n\n                  </label>\n\n                  <label class="textarea">\n\n                    <textarea (change)="dataChanges()" rows="1" style="width:100%" class="custom-scroll" [disabled]="enableOtherNote[itm.questionNumber]"\n\n                              ng-init="enableOtherNote[\' + drQuestion.questionNumber + \']=\' + true + \'" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                    </textarea>\n\n                  </label>\n\n                </div>\n\n\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div *ngFor="let pram of itm.parametersList" class="LopContain">\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Food\'" style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/food/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Mood\'"style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/mood/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Milk\'"style="display: inline-block">\n\n            <ion-row>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <img [src]="\'assets/milk/\'+pram.value+\'.png\'" class="imgOfRadio">\n\n            </ion-row>\n\n          </div>\n\n\n\n          <div *ngIf="setImageOrLable(itm.question,pram.value) == \'Label\'">\n\n            <label>\n\n              <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber ].answer">\n\n              <i></i>\n\n              {{pram.value}}\n\n            </label>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="">\n\n          <div class="inline-group">\n\n\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n                <label >\n\n                  <input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                  {{pram.value}}\n\n                </label>\n\n              </div>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n        <div style=" clear: both;" >\n\n\n\n          <div *ngFor="let pram of itm.parametersList; let i = index">\n\n            <div *ngIf="itm.parametersList[i].key != \'OPTION_ANSWER\'">\n\n              <label>\n\n                {{pram.value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea rows="2" cols="50" class="custom-scroll" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                </textarea>\n\n              </label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n      </div>\n\n\n\n\n\n      <!--Type "SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row">\n\n          <div class="col col-12">\n\n\n\n            <div *ngFor="let pram of itm.parametersList; let i = index" class="LopContain">\n\n              <div *ngIf="itm.parametersList[i].key == \'OPTION_ANSWER\'">\n\n                <label >\n\n                  <input (change)="dataChanges()" class="checkbox" type="checkbox" [name]="\'checkbox\' + itm.questionNumber+i"\n\n                         ng-change="disableNote(reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0],itm.questionNumber)"\n\n                         [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0]">\n\n                  <i></i>\n\n                  {{itm.parametersList[i].value}}\n\n                </label>\n\n              </div>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n        <div>\n\n\n\n          <div *ngFor="let pram of itm.parametersList; let i = index">\n\n            <div *ngIf="itm.parametersList[i].key != \'OPTION_ANSWER\'">\n\n              <label>\n\n                {{itm.parametersList[i].value}}\n\n              </label>\n\n              <label class="textarea">\n\n                <textarea (change)="dataChanges()"  [disabled]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[0]"\n\n                           rows="3" class="custom-scroll"\n\n                           [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[1]">\n\n                </textarea>\n\n              </label>\n\n            </div>\n\n\n\n          </div>\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n\n\n        <div *ngFor=" let pram of itm.parametersList; let i = index">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{itm.parametersList[i].value}} :</label></div><br>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TEXT\'">\n\n            <br>\n\n            <br>\n\n            {{openDataSINGLE_SHORT_TEXT_ONE_VIEW_SELECTED(i)}}\n\n            <section class="col-md-5"><label>{{pram.value}} <br></label><label class="input"><input style="width: 100%;height: 30px" type="text" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"></label></section>\n\n            <br>\n\n          </div>\n\n\n\n\n\n          <span *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_HELPER_TEXT\';">\n\n            <span *ngFor="let radio of itm.parametersList[i]; let j = index" style="display: inline-block;padding-right: 20px">\n\n              <label ><input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\'+ SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED_INDEX+1" [value]="radio.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[(i)]" (change)="override()"><i></i>      {{radio.value}} <br></label>\n\n            </span>\n\n          </span>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "MULTI_SHORT_TEXT_ONE_VIEW_SELECTED"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED\'">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor=" let pram of itm.parametersList; let i = index;">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{pram.value}} :</label></div>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TEXT\'" style="width: 100% !important;display: block">\n\n            {{openDataMULTI_SHORT_TEXT_ONE_VIEW_SELECTED(i)}}\n\n            <section class="col-md-3"><label class="" style="">{{pram.value}}</label><label class="input"><input (change)="dataChanges()" style="width: 100%;height: 30px" type="text" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"></label></section>\n\n            <br>\n\n          </div>\n\n\n\n          <span *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_HELPER_TEXT\';">\n\n            <span style="display: inline-block;width:  100px;">\n\n              <label><input (change)="dataChanges()" type="radio" class="radio" [name]="\'radio-inline\'+ itm.questionNumber" [value]="itm.parametersList[i].value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[MULTI_SHORT_TEXT_ONE_VIEW_SELECTED_Index+1]" (change)="override()"><i></i>      {{pram.value}} </label>\n\n            </span>\n\n          </span>\n\n\n\n        </span>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER"-->\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' ||\n\n                  itm.reportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'">\n\n\n\n        <div style="display: inline-block;width: 100%;">\n\n          <label class="formLabel" style="width:initial ;float: left">\n\n            {{itm.question}} :\n\n          </label>\n\n\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n\n\n          <button ion-button icon-only clear style="height: 25px;width: 25px; padding: 0;margin-bottom: 20px;float: right" (click)="editSaveQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == false && showEditButton()" [hidden]="!editQuestionAllowed">\n\n            <ion-icon style="font-size: 20px;" name="create"></ion-icon>\n\n          </button>\n\n\n\n          <button ion-button icon-only clear style="padding: 0; width: 70px;float: right; margin-top: -7px" (click)="cancelEditigQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            cancel\n\n          </button>\n\n\n\n          <button ion-button icon-only clear style="padding: 0;width: 50px;float: right; margin-top: -7px" (click)="editSaveQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            save\n\n          </button>\n\n        </div>\n\n\n\n        <br>\n\n\n\n\n\n        <span *ngFor="let pram of itm.parametersList;let j = index" style="display: block">\n\n          <span *ngIf="pram.key == \'OPTION_HELPER_TEXT\' || pram.key == \'OPTION_ANSWER\'">\n\n            <span style="display: inline-block;width: 100%; margin-bottom: 20px">\n\n              <label style="bottom: 5px; float:left;"><input (change)="dataChanges()" class="checkbox" type="checkbox"  [name]="\'checkbox\'+itm.questionNumber" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[pram.id]">\n\n                <i></i> {{pram.value}} </label>\n\n              <button ion-button icon-only clear style="height: 25px;width: 25px; padding: 0;bottom: 5px;float: right;" (click)="removeQuestionParameter(itm.questionNumber ,pram.id)" *ngIf="itm.editQuestion == true" [disabled]="!editQuestionAllowed">\n\n            <ion-icon style="font-size: 20px;" name="trash"></ion-icon>\n\n          </button>\n\n            </span>\n\n          </span>\n\n        </span>\n\n\n\n        <ion-row style="display: inline-block; width: 100%">\n\n          <input style="width: calc(100% - 50px); height: 40px; padding: 0" (change)="dataChanges()" *ngIf="itm.editQuestion == true" [(ngModel)]="reportQuestionsEditParamTemps[itm.questionNumber].parameters[0].value" class="form-control" placeholder=" Pleas enter your new question" />\n\n          <button ion-button icon-only clear style="width: 40px; height: 40px; padding: 0;margin: 0;float: right" (click)="addParameterForQuestion(itm.questionNumber)" *ngIf="itm.editQuestion == true">\n\n            add\n\n          </button>\n\n        </ion-row>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor="let pram of itm.parametersList; let i = index;" class="longOneAnswer">\n\n          <label style="display: inline-block"><input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\' + itm.questionNumber" [value]="pram.value" ng-change="enableOther(itm.questionNumber + \',\' + i)" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer"><i></i>     {{pram.value}}</label>\n\n        </span>\n\n      </div>\n\n\n\n\n\n\n\n\n\n      <!--Type "CONSTANT_SHORT_HELPER_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'CONSTANT_SHORT_HELPER_TEXT_QUESTION\';">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <span *ngFor="let pram of itm.parametersList; let k = index;" style="display: block;" >\n\n          <section class="col col-2"><label style="margin-top: 5px"> {{pram.value}}   </label><label class="input"><input (change)="dataChanges()" style="width: 100%;height: 30px;" type="text" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[k]"></label></section>\n\n        </span>\n\n\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n      <!--Type "SHORT_HELPER_TEXT_QUESTION"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'SHORT_HELPER_TEXT_QUESTION\';let i = index;">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n\n\n        <div class="row" style="">\n\n\n\n          <div style="display: inline-block; padding-right: 20px" *ngFor="let pram of itm.parametersList; let TEMP = index">\n\n            <section class="section" style="margin-left: 9px;width: {{100/itm.parametersList.length}} %">\n\n              <label class="formLabel ng-scope" style="margin-top: 5px;font-weight: normal">\n\n                {{pram.value}} :\n\n              </label>\n\n              <br>\n\n              <label class="input">\n\n                <input (change)="dataChanges()" style="width: 70px; height: 35px;" type="text" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[TEMP.toString()]">\n\n              </label>\n\n            </section>\n\n          </div><br>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n      <!--Type "DROPDOWN_MENU_ONE_VIEW_SELECTED_EN"-->\n\n      <!--Type "DROPDOWN_MENU_ONE_VIEW_SELECTED_AR"-->\n\n      <div *ngIf="itm.reportQuestionType.title == \'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN\' || itm.reportQuestionType.title == \'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR\';let i = index;">\n\n\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n\n\n\n\n        <div *ngFor=" let pram of itm.parametersList; let i = index">\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_HELPER_TITLE\'">\n\n            <div class="col col-6"><label class="formLabel">{{itm.parametersList[i].value}} :</label></div><br>\n\n          </div>\n\n\n\n          <div *ngIf="itm.parametersList[i].key == \'OPTION_DROP_DOWN\'">\n\n            <br>{{console.log(\'Data\'+i)}}\n\n            {{openDataDROPDOWN_MENU_ONE_VIEW_SELECTED(i)}}\n\n            <ion-label>{{itm.parametersList[i].value}}</ion-label>\n\n            <ion-item style="padding: 0;margin: 0">\n\n              <ion-select (change)="dataChanges()" style="width: 100%;max-width: 100%" [placeholder]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]" multiple="false" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]">\n\n                <ion-option *ngFor="let itmPram of selectionData.get(itm.id)" [value]="itmPram.value">{{itmPram.value}}</ion-option>\n\n              </ion-select>\n\n            </ion-item>\n\n            <br>\n\n          </div>\n\n\n\n\n\n          <div *ngIf="itm.parametersList[i].key != \'OPTION_HELPER_TITLE\' && itm.parametersList[i].key != \'OPTION_DROP_DOWN\';">\n\n            <div *ngFor="let radio of itm.parametersList[i]; let j = index" style="display: inline-block;padding-right: 20px">\n\n              <label ><input (change)="dataChanges()" class="radio" type="radio" [name]="\'radio-inline\'+itm.questionNumber + i" [value]="radio.value" [(ngModel)]="reportAnswer.reportAnswersObjectsList[itm.questionNumber].answer[i]" (change)="override()"><i></i>      {{radio.value}} <br></label>\n\n            </div>\n\n          </div>\n\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n\n\n      <!--Type "Else"-->\n\n      <div *ngIf="itm.reportQuestionType.title != \'TEXT_QUESTION\' && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'\n\n       && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN\'\n\n        && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR\' && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT\'\n\n         && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT\' && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'\n\n         && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION\' && itm.reportQuestionType.title != \'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED\'\n\n          && itm.reportQuestionType.title != \'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED\' && itm.reportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER\'\n\n           && itm.reportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER\' && itm.reportQuestionType.title != \'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER\'\n\n            && itm.reportQuestionType.title != \'CONSTANT_SHORT_HELPER_TEXT_QUESTION\' && itm.reportQuestionType.title != \'SHORT_HELPER_TEXT_QUESTION\'\n\n             && itm.reportQuestionType.title != \'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN\' && itm.reportQuestionType.title != \'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR\'\n\n              && itm.reportQuestionType.title != \'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION\'">\n\n        <ion-row>\n\n          <label class="formLabel" style="float: left;width: calc(100% - 1.2em);">\n\n            {{itm.question}} :\n\n          </label>\n\n          <ion-icon style="float: right" name="alert" color="danger" *ngIf="showConflict(drIndex)"></ion-icon>\n\n        </ion-row>\n\n        <br>\n\n        <div class="row">\n\n          <div class="col col-4">\n\n\n\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </div>\n\n    <!--<div padding="10px" [innerHTML]="sanitizer.bypassSecurityTrustHtml(reportTemplate)"></div>-->\n\n  </ion-card>\n\n\n\n\n\n\n\n  <div style="position: fixed; bottom: 0; right: 0; width: 100%;">\n\n\n\n\n\n    <ion-fab bottom right #fab style="z-index: -1;" >\n\n      <button ion-fab><ion-icon name="more"></ion-icon></button>\n\n      <ion-fab-list side="top" >\n\n\n\n\n\n        <button ion-fab mini style="background-color: #309CCE" (click)="fabSelected(\'rest\',fab)" *ngIf="showRestButton() && navParams.get(\'selected\').length == 1">\n\n          <img src="assets/icon/reset.png">\n\n          <ion-label>Rest</ion-label>\n\n        </button>\n\n\n\n\n\n        <button ion-fab mini style="background-color: #309CCE" (click)="fabSelected(\'save\',fab)" *ngIf="showSaveOrUpdate() == \'save\' && showButtonOfSaveOrUpdate()">\n\n          <img src="assets/icon/save.png">\n\n          <ion-label>Save</ion-label>\n\n        </button>\n\n\n\n        <button ion-fab mini style="background-color: #309CCE" (click)="fabSelected(\'update\',fab)" *ngIf="showSaveOrUpdate() == \'update\' && showButtonOfSaveOrUpdate()">\n\n          <img src="assets/icon/save.png">\n\n          <ion-label>Update</ion-label>\n\n        </button>\n\n\n\n\n\n        <button ion-fab mini style="background-color: #309CCE" (click)="fabSelected(\'approve\',fab)"\n\n                *ngIf="showApproveButton()">\n\n          <img style="filter: brightness(0) invert(1);" src="assets/icon/approved_black.png">\n\n          <ion-label>Approve</ion-label>\n\n        </button>\n\n\n\n\n\n      </ion-fab-list>\n\n    </ion-fab>\n\n\n\n    <report-comment *ngIf="selectedListOfStudents?.length == 1" [date]="selectedReportDate"\n\n                    [student]="selectedListOfStudents[0]" [reportId]="reportId"></report-comment>\n\n\n\n  </div>\n\n\n\n\n\n\n\n\n\n</ion-content>\n\n'/*ion-inline-end:"D:\Entrepreware\Edufy-mostafa\src\pages\report-template\report-template.html"*/,
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["k" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["l" /* NavParams */], __WEBPACK_IMPORTED_MODULE_2__services_account__["a" /* AccountService */], __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__["c" /* DomSanitizer */],
            __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["m" /* Platform */], __WEBPACK_IMPORTED_MODULE_5__ionic_storage__["b" /* Storage */], __WEBPACK_IMPORTED_MODULE_6__services_dailyreport__["a" /* DailyReportService */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["g" /* LoadingController */],
            __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["p" /* ToastController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["q" /* ViewController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["b" /* AlertController */],
            __WEBPACK_IMPORTED_MODULE_7__services_checkboxFunctionService__["a" /* CheckboxFunctionService */], __WEBPACK_IMPORTED_MODULE_8__ionic_native_date_picker__["a" /* DatePicker */], __WEBPACK_IMPORTED_MODULE_9__services_transFormDate__["a" /* TransFormDate */]])
    ], ReportTemplatePage);
    return ReportTemplatePage;
}());

//# sourceMappingURL=report-template.js.map

/***/ }),

/***/ 716:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TemplateShape; });
var TemplateShape = /** @class */ (function () {
    function TemplateShape() {
        this.row = [];
    }
    TemplateShape.prototype.makeTheTemplateShape = function (reportQuestion, reportId) {
        return this.getTemplate(reportQuestion, reportId);
    };
    TemplateShape.prototype.getTemplate = function (drQuestion, reportId) {
        var questionTitle;
        if (reportId == -1) {
            questionTitle = drQuestion.dailyReportQuestionType.title;
        }
        else {
            questionTitle = drQuestion.reportQuestionType.title;
        }
        switch (questionTitle) {
            case 'TEXT_QUESTION':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_EN':
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER_INPUT_BOX_AR':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER_WITH_EDIT':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_EDIT':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER_WITH_TEXT_QUESTION':
                return drQuestion.parametersList;
            case 'SHORT_TEXT_MULTISELECT_VIEW_SELECTED_MULTISELECT_ANSWER_WITH_TEXT_QUESTION':
                return drQuestion.parametersList;
            case 'SINGLE_SHORT_TEXT_ONE_VIEW_SELECTED':
                var label = [];
                var row = [];
                var tempRow = [];
                var radios = [];
                var countRow = 0;
                var countParameters = 0;
                var helpertext = false;
                var count = 0;
                var optionAnswerCounter = 0;
                var optionHelperText = 0;
                var switchToHelper = 0;
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_ANSWER") {
                        optionAnswerCounter++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_HELPER_TEXT") {
                        optionHelperText++;
                    }
                }
                switchToHelper = (optionAnswerCounter / (optionHelperText)) - 1;
                console.log("Hi From Question Directive");
                console.log('optionAnswerCounter= ' + optionAnswerCounter + ', optionHelperText= ' + optionHelperText + ', switchToHelper= ' + switchToHelper);
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_HELPER_TITLE") {
                        row.push(drQuestion.parametersList[i]);
                        // countParameters++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_HELPER_TEXT") {
                        if (helpertext) {
                            tempRow.push(radios);
                            for (var _i = 0, tempRow_1 = tempRow; _i < tempRow_1.length; _i++) {
                                var temp = tempRow_1[_i];
                                row.push(temp);
                            }
                            tempRow = [];
                            radios = [];
                            countRow++;
                            tempRow.push(drQuestion.parametersList[i]);
                            countParameters++;
                            helpertext = false;
                            count = 0;
                        }
                        else {
                            tempRow.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                    else {
                        if (count != switchToHelper) {
                            helpertext = true;
                            radios.push(drQuestion.parametersList[i]);
                            count++;
                        }
                        else {
                            helpertext = true;
                            radios.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                }
                tempRow.push(radios);
                for (var _a = 0, tempRow_2 = tempRow; _a < tempRow_2.length; _a++) {
                    var temp = tempRow_2[_a];
                    row.push(temp);
                }
                return row;
            case 'MULTI_SHORT_TEXT_ONE_VIEW_SELECTED':
                row = [];
                tempRow = [];
                radios = [];
                countRow = 0;
                countParameters = 0;
                helpertext = false;
                count = 0;
                optionAnswerCounter = 0;
                optionHelperText = 0;
                switchToHelper = 0;
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_ANSWER") {
                        optionAnswerCounter++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_HELPER_TEXT") {
                        optionHelperText++;
                    }
                }
                switchToHelper = (optionAnswerCounter / (optionHelperText / 2)) - 1;
                console.log("Hi From Question Directive");
                console.log(switchToHelper);
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_HELPER_TITLE") {
                        row.push(drQuestion.parametersList[i]);
                        // countParameters++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_HELPER_TEXT") {
                        if (helpertext) {
                            tempRow.push(radios);
                            countRow++;
                            row.push(drQuestion.parametersList[i]);
                            countParameters++;
                            helpertext = false;
                            count = 0;
                        }
                        else {
                            row.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                    else {
                        if (count != switchToHelper) {
                            helpertext = true;
                            row.push(drQuestion.parametersList[i]);
                            count++;
                        }
                        else {
                            helpertext = true;
                            row.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                }
                return row;
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_MULTIPLE_ANSWER':
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_NONE_ANSWER':
                return drQuestion.parametersList;
            case 'LONG_TEXT_MULTISELECT_VIEW_SELECTED_ONE_ANSWER':
                var radioList = [];
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    radioList.push(drQuestion.parametersList[i]);
                }
                return radioList;
            case 'CONSTANT_SHORT_HELPER_TEXT_QUESTION':
                var textList = [];
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    textList.push(drQuestion.parametersList[i]);
                }
                return textList;
            case 'SHORT_HELPER_TEXT_QUESTION':
                textList = [];
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    textList.push(drQuestion.parametersList[i]);
                }
                return textList;
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_EN':
            case 'DROPDOWN_MENU_ONE_VIEW_SELECTED_AR':
                row = [];
                radioList = [];
                tempRow = [];
                countRow = 0;
                countParameters = 0;
                helpertext = false;
                count = 0;
                optionAnswerCounter = 0;
                optionHelperText = 0;
                switchToHelper = 0;
                var choiceList = [];
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_ANSWER") {
                        optionAnswerCounter++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_DROP_DOWN") {
                        optionHelperText++;
                    }
                }
                switchToHelper = (optionAnswerCounter / (optionHelperText)) - 1;
                console.log("Hi From Question Directive");
                console.log(switchToHelper);
                for (var i = 0; i < drQuestion.parametersList.length; i++) {
                    if (drQuestion.parametersList[i].key == "OPTION_HELPER_TITLE") {
                        row.push(drQuestion.parametersList[i]);
                        // countParameters++;
                    }
                    else if (drQuestion.parametersList[i].key == "OPTION_DROP_DOWN") {
                        if (helpertext) {
                            tempRow.push(radioList);
                            for (var _b = 0, tempRow_3 = tempRow; _b < tempRow_3.length; _b++) {
                                var temp = tempRow_3[_b];
                                row.push(temp);
                            }
                            radioList = [];
                            tempRow = [];
                            countRow++;
                            tempRow.push(drQuestion.parametersList[i]);
                            helpertext = false;
                            countParameters++;
                            count = 0;
                        }
                        else {
                            tempRow.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                    else {
                        if (count != switchToHelper) {
                            helpertext = true;
                            radioList.push(drQuestion.parametersList[i]);
                            count++;
                        }
                        else {
                            helpertext = true;
                            radioList.push(drQuestion.parametersList[i]);
                            countParameters++;
                        }
                    }
                }
                tempRow.push(radioList);
                for (var _c = 0, tempRow_4 = tempRow; _c < tempRow_4.length; _c++) {
                    var temp = tempRow_4[_c];
                    row.push(temp);
                }
                return row;
            default:
                if (reportId == -1) {
                    console.info("ThigetTemplates type not mapped: " + drQuestion.dailyReportQuestionType.title);
                }
                else {
                    console.info("ThigetTemplates type not mapped: " + drQuestion.reportQuestionType.title);
                }
                return drQuestion.parametersList;
        }
    };
    return TemplateShape;
}());

//# sourceMappingURL=template_Shape.js.map

/***/ })

});
//# sourceMappingURL=4.js.map